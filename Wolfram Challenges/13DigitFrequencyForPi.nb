(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     79973,       1637]
NotebookOptionsPosition[     60051,       1261]
NotebookOutlinePosition[     75497,       1560]
CellTagsIndexPosition[     75426,       1555]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Digit Frequency for Pi", "Title"],

Cell[BoxData[
 FrameBox[
  TagBox[GridBox[{
     {
      StyleBox["\<\"THE CHALLENGE\"\>",
       StripOnInput->False,
       FontFamily->"Source Sans Pro",
       FontSize->18,
       FontWeight->Plain,
       FontColor->GrayLevel[1]]}
    },
    AutoDelete->False,
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
   "Grid"],
  Background->RGBColor[0.9961, 0.3098, 0.21569],
  FrameMargins->{{13, 13}, {2, 8}},
  FrameStyle->None,
  ImageMargins->{{0, 0}, {-2, 0}},
  StripOnInput->False]], "WCIntroDivider",
 CellMargins->{{66, 0}, {-2, 37}}],

Cell["", "WCIntroDividerLine"],

Cell[TextData[{
 "Pi (",
 Cell[BoxData[
  FormBox["\[Pi]", TraditionalForm]]],
 ") has an infinite decimal expansion starting 3.14159\[Ellipsis]. Given the \
decimal expansion of ",
 Cell[BoxData[
  FormBox["\[Pi]", TraditionalForm]]],
 " to ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " places, write a function that returns a list of the count of each digit \
from 0 to 9 in the expansion. "
}], "Description"],

Cell[CellGroupData[{

Cell["More Details", "Section"],

Cell[TextData[{
 "The first 5 digits of \[Pi] are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3.1415", "\[Ellipsis]"}], TraditionalForm]]],
 ", so the counts are 0, 2, 0, 1, 1, 1, 0, 0, 0, 0; that is, there are no \
zeros, two 1s, no 2s, one 3, one 4, one 5 and no 6s, 7s, 8s or 9s."
}], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["What Your Function Should Do", "Section"],

Cell[TextData[{
 "Write a function called ",
 StyleBox["DigitCountPi", "InlineCode"],
 " that takes a positive integer ",
 StyleBox["n", "InlineCode"],
 " as input and outputs a list of numbers that count the number of \
occurrences of the digits 0\[Dash]9 in the ",
 StyleBox["n", "InlineCode"],
 "-digit decimal expansion of ",
 Cell[BoxData[
  FormBox["\[Pi]", TraditionalForm]]],
 ". The output should be a list of length 10."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["DigitCountPi",
   StripOnInput->True,
   FontColor->GrayLevel[0]], "[", "5", "]"}]], "Input",
 Editable->False,
 Evaluatable->False,
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"In[1]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "2", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", 
   ",", "0", ",", "0"}], "}"}]], "Output",
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"Out[1]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["More Examples", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["DigitCountPi",
   StripOnInput->True,
   FontColor->GrayLevel[0]], "[", "1", "]"}]], "Input",
 Editable->False,
 Evaluatable->False,
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"In[2]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0"}], "}"}]], "Output",
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"Out[2]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["DigitCountPi",
   StripOnInput->True,
   FontColor->GrayLevel[0]], "[", "10", "]"}]], "Input",
 Editable->False,
 Evaluatable->False,
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"In[3]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "0", 
   ",", "0", ",", "1"}], "}"}]], "Output",
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"Out[3]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["DigitCountPi",
   StripOnInput->True,
   FontColor->GrayLevel[0]], "[", "40", "]"}]], "Input",
 Editable->False,
 Evaluatable->False,
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"In[4]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "3", ",", "5", ",", "7", ",", "4", ",", "4", ",", "3", ",", "3", 
   ",", "5", ",", "5"}], "}"}]], "Output",
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"Out[4]="]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 FrameBox[
  TagBox[GridBox[{
     {
      StyleBox["\<\"SCRATCH AREA\"\>",
       StripOnInput->False,
       FontFamily->"Source Sans Pro",
       FontSize->18,
       FontWeight->Plain,
       FontColor->GrayLevel[1]]}
    },
    AutoDelete->False,
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
   "Grid"],
  Background->GrayLevel[0.65],
  FrameMargins->{{13, 13}, {2, 5}},
  FrameStyle->None,
  ImageMargins->{{0, 0}, {-2, 0}},
  StripOnInput->False]], "WCIntroDivider",
 CellGroupingRules->{"SectionGrouping", 0}],

Cell[BoxData[""], "WCIntroDividerLine",
 CellFrameColor->GrayLevel[0.65]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Pi", ",", "5"}], "]"}]], "Input",
 CellLabel->"In[44]:=",ExpressionUUID->"614faa7f-002a-45f1-8c0f-a96a7d0aa30a"],

Cell[BoxData["3.1415926535897932385`5."], "Output",
 CellLabel->"Out[44]=",ExpressionUUID->"3cab857d-3d69-40c5-b454-62abe007588f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"n", "=", "5"}]], "Input",
 CellLabel->"In[63]:=",ExpressionUUID->"4c26cb70-ff5a-4897-ae85-a71f8520a95e"],

Cell[BoxData["5"], "Output",
 CellLabel->"Out[63]=",ExpressionUUID->"4931d414-d46d-46eb-bf58-aa0c11b21803"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{"RealDigits", "[", 
   RowBox[{"N", "[", 
    RowBox[{"Pi", ",", "n"}], "]"}], "]"}], "]"}]], "Input",
 CellLabel->"In[64]:=",ExpressionUUID->"24139b2d-5628-4685-910c-6f31f0ad174d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "1", ",", "4", ",", "1", ",", "6"}], "}"}]], "Output",
 CellLabel->"Out[64]=",ExpressionUUID->"0a770dd9-5ec0-4179-8658-f625d582e94e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"Counts", "[", 
   RowBox[{"First", "[", 
    RowBox[{"RealDigits", "[", 
     RowBox[{"N", "[", 
      RowBox[{"Pi", ",", "n"}], "]"}], "]"}], "]"}], "]"}], "]"}]], "Input",
 CellLabel->"In[65]:=",ExpressionUUID->"fa9026e5-ac07-4ce0-a310-dbad80671704"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"3", "\[Rule]", "1"}], ",", 
   RowBox[{"4", "\[Rule]", "1"}], ",", 
   RowBox[{"6", "\[Rule]", "1"}], ",", 
   RowBox[{"1", "\[Rule]", "2"}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[65]=",ExpressionUUID->"e89f92d7-7843-4c62-99fa-1d177aba06e0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"Tally", "[", 
   RowBox[{"First", "[", 
    RowBox[{"RealDigits", "[", 
     RowBox[{"N", "[", 
      RowBox[{"Pi", ",", "n"}], "]"}], "]"}], "]"}], "]"}], "]"}]], "Input",
 CellLabel->"In[70]:=",ExpressionUUID->"1bae656d-89ad-4a96-bc73-4dcaf554ec18"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[70]=",ExpressionUUID->"7c756043-0be4-4cd6-ade9-e109ffe1e106"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BinCounts", "[", 
  RowBox[{
   RowBox[{"First", "[", 
    RowBox[{"RealDigits", "[", 
     RowBox[{"N", "[", 
      RowBox[{"Pi", ",", "n"}], "]"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "10", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[72]:=",ExpressionUUID->"d604f037-590e-4f4a-adee-5ccc8327e202"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "2", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0"}], "}"}]], "Output",
 CellLabel->"Out[72]=",ExpressionUUID->"40198607-4cd8-4833-9e39-e6c516fe3730"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"DigitCountPi", "[", 
   RowBox[{"n_Integer", "?", "Positive"}], "]"}], ":=", 
  RowBox[{"BinCounts", "[", 
   RowBox[{
    RowBox[{"First", "[", 
     RowBox[{"RealDigits", "[", 
      RowBox[{"N", "[", 
       RowBox[{"Pi", ",", "n"}], "]"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "10", ",", "1"}], "}"}]}], "]"}]}]], "Input",
 CellLabel->"In[73]:=",ExpressionUUID->"e7cd404d-bced-432f-81b5-86ad3eea70c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitCountPi", "[", "2834", "]"}]], "Input",
 CellLabel->"In[74]:=",ExpressionUUID->"dda2f9ff-ec4f-42c9-88b4-53543860f1d6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "247", ",", "281", ",", "293", ",", "252", ",", "294", ",", "305", ",", 
   "287", ",", "273", ",", "294", ",", "308"}], "}"}]], "Output",
 CellLabel->"Out[74]=",ExpressionUUID->"44bc336a-46a1-498e-988e-5647d708d32b"]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3X3Qa1ld4HvvS9W9f1hAYVsDKg7eAkehwNauUga04NJKQRW+NM9gOfZ0
KPAl3AEhLTiGLtBwGIy0Rqc1yjFeORnUyDVn7JszQ2gNRzMewrTBTnFPCqPm
MAQrDZlDbMKZaEej87t77de1d/ZOdpK98+Q5z/dTtTn0k/2y9ttav73W2mt/
3Rve+pof/Z+/7Mu+7G3/u/E/r3n9T/6fP/7jr3/HydOM/3jtW972f2Xf8iM/
/Kq3vP1Hsj/y4y96w/9i/PGj/9OXfdn/Zsz/vxr/XwAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ8M//INItyvy/veLvPFHRV7xnSLf
8FyRZ36FyNOeak1PNf7/c75O5MUvFnndvSI/+z6Rj14VefJvTzv1AAAgKe2P
GbHAm0Se+2wvBth2uuMOkX/1gyL1h0WWf3/aewQAALb1j/8o8sEPitx11+7x
QNT0z75OpFQSmc9Pey8BAEAcf/hHRkzwrcnHBMFJtT184JLI//gfp73HAAAg
zN/8jcib3pR+TBCcXv1Kkc+NT3vvAQCA7tOfFnnxiw4fF+h1CKrPIgAAOH2f
+pTIs/foZ5jUpN5x+L3/cNpHAwCA8+0v/lzkq7529/Jcvav4w1mRt7/deq/x
7peJfOUe8cGXP03k4cZpHxUAAM6nL9wUeeE3bl9+P+UpIve/TWT0V9Hr/Zn3
GPPesVt8oN53/MQnDnssAAA479S7Aa95zfbltnr/8OP/Jd42en8q8sxn7RYf
qJjl1izdYwAAADzq3cFty+tnPVtk+OnttlP7rd3bF9Q7EwAAIH1f+tJufQ9V
X4Df/E1vPZ/9rMhP/ITV5+DOu0Te/GaRz3/evy1VP7FLu4Wanm5M1z952GMD
AMB59POl3Z/l1fRzvyjyyEdFnvGM1d++4yXWmIq63Ft335YaZxkAAKRHfS/p
65+3X2zg1CFE/ab6GejU95b22U5Un0cAALC/j39s/7hg0xQcw+h9e8QGavp3
v3A6xwoAgPPgp38q3bhAfa/5iS/6t/kD9+63zle86nSOFQAA54H6dkGascG7
3+3f3uRzIs94+n7r/OpnnM6xAgDgPHhWimMjv/I7RZZ/799eJpPMupfL0zle
AADcztT7A2nFBap/Y/D9RfW+Y1Lr/7u/O51jBgDA7Wz2xZRigztW301QfR7V
t5OS2saC2AAAgMSp8jWN2CD4HsFnR9Y3l5PcBvUGAACk46tDxivaZ3rBC/x9
AVS7hep3kHT8EezHAAAAkvHPvy3ZMrtU8q//3+/x/YR1kxp7GQAAJO8tb062
zO486l//d6XwjqSqmwAAAOn44AeTLbc/8xn/+p+14zeZ101vy53KoQIA4Fy4
NbPGLkyq3H7XO0V+6Ze9Kcl1O9PV3z/towYAwO3t9T+UfPmd1vTN37T6XUcA
AJCswZ+JPP0Iyv04069UTvtoAQBwPrzhDcmU3S/8RpH3PWiV4d/73cnGBd/2
LYyVDADAoXzhCyL/bM/xiVRc8MUnvHWq9wzf+MZk4oIvf5pI+2Ond3wAADgL
VHl+7eMiH6yKFN9r9QN8S07kX7/RmnJvFblQEHn/+0U+8hGRv/zz9W31ap59
yu+f+8XVdX5unExsEPyeIwAAsMr23/g1kXszIs/d8fuJahxE9V3mCxessQj+
4R/823jvz+5eftcfXk2zqjvYNy7I/OBqOgEAOK8mn7Oex7894fELnUnFGG+/
X6Tb9bb5wLt2W9c737Ga/k98Yr/0vea7Rf7mbw53vAEAOFafvG48L2esdvY0
YoKw6e6Xed9P3KX+QI1l8LE/9vbhCzdFXvaS3dOj6kf4phIA4Ly7/kmRH/j+
+OXnV32tUf6+zBqj4O1vF3nPu62+B//2Z6zn/ze+SeTVrxa584Xx1qfaHH6/
ZaXlyn/c/vuJ6l1INU7ya14j8owdv+P0lKeI/HyJbyYAAM632RdFfuytm8cZ
UGW8mq9et9obtqHGQPzDP7L6Gqg6gqhtfKUx/eIvWWWz2sarU/gmQtT04heL
fLKXyiEGAODMaP6ByDc8N7q8/LqvsfoEfPy/rD5LX/5/rbqGXXz2s9Z3E7/5
m8K3+9p7RJ5cWGV12jHB1z9P5AOXGL8AAHC+qXLwgXx0efl/fL3VD3E+D19e
fSdJ9UdQ7ynuQ73XqNoPgnUJqp+iej/g0iXrW87PeHryMcGrvsuIb36HfgUA
AKgxgqLq6lWb/8++T2Sxprx8+Pe8fop33pVMmlSdxMMNrx7hTW+y/v6a11r/
reo2gvUbd98t8oLnx48F1PhK9/5LkV95v8j4r5JJNwAAZ50aD+ibviW87FTl
5qYy89E/WX2G/9Snkkvfk38rUniX9V6jetfgqdq3FP/JPxF53vOs/oIf+l1v
GRXrqPcVH75i1Weo8ZbUdxh//QNWvYAaS2Hb/hEAAJwHw0+LPPcbV2MCVdb/
2sXNyz/xRWtsYrWMKp+duof3vHfzsqrsjmqfiKLqL4JpVfUKqk8jAADYj6ov
CHuXUJX1cfsTvv511jLqWf7DHxb5yxt2//4XrV9OxQX/9GtEBn8ZP70qjlBx
zF13Wdu44w6RfF7k1n+3+iGocRoBAMBu1PuDYWMbvujbRT7/+XjrUP0FneUu
/rr3d6fsjir3VXvDM59lzfPxLb5X9DP/1lrm2c82/v97rO83KP2+NaaCijX+
gvgAAICtqT5+YeMZvfSlVswQhxo3+Pl2P8AfuNf/W8Ee41iNZRik4gJ9/CLV
1zAOVcfxljdb319a/r31N9We8cYf9Y/BoOpBnJgBAADEE9Zmr94JVOMdxfU+
ex1qXOLPjvy/qXGK1W9qfGKdakdQ4ybq21XvI+5KxTg/nF3dl++5hzEMAQCI
S/X1/8pAWareA9zm/T31XK7eD1DL/vRPrf6uxklw2gw+8xnrb6qvoLOME4uo
f9VYR/tQdQjf+92r8UGcfpQAAJx3qhz954E+BmpMgmt/vHlZnRrbyFz+DpHJ
fwuf53X3emW/agdQ/Qad7f32h6zvK6j/Vt9Y2NdfT0We8xz/fqntqX6RAAAg
2s/9wurztSqjt6HaHZw6gTe+MXq+D1ateVSZ7YxHoP790P9j/e70K7z/bbvv
j+4/t1e/EanGSAIAAOFuTv11+mp6yUutd/+28cu/7C2vxjyK8rnP+7flvOPo
+CV7Pf96TXyxrXe9czX2aV1Nbv0AANxOnHcHnEn17Vd9A7eh+ve94AXW8nd9
6+b51fuQTv2+851lhxMbqPERkqLGPwi2LXzHS+iXCABAkGoH+Jpn+svMN75p
+/Wo8t1ZXn0zeZN3vzu6/Hdig+///u3TsY4aDzlYd/DIR5PdBgAAZ50aZ0Av
K9V7Cup7yNv64Td4y0f1QdSpbxao+dX3joOctgk1xnKSVB1BsL/l931PstsA
AOAsU2XlCwPfS9iljV/V16vvMarl783EW0b1ZVDfVVbLfC4w1qLznsIr7t4+
LZt88LdX6w4Gf5b8dgAAOIvaH1stJ3f5RuL7tPGStnnnMfdWaxn1HqPO6f/w
HS8JX24f6l3N5we+3XzhQvLbAQDgLFLjDAffTdiW+s6xMy6x+m7BNlRbv1Ov
r96VcPzET6QXGyjBvpeqDyUAABD5Z1/nLyNVH8BtqPGD1DeMnHcbtn0nUD3D
v+I77bEOjLR8+D9Zf3+TPdbx3VvGGnFd76/Wl3zy/0tnWwAAnBWqjT1YPm4z
NrLqL6DqCZzxDB/+vd3Sob7L9KpXe2lQ31B83evS6Yuo+7Zv8e/7r/5qetsC
AOAs+JX3+8vGO+/abvmfL3nL6t9g3oWKD/7F9/nHQlL/vvae/da7ztty/v1/
3b2blwEA4HaW/SF/2fhjb42/rFnncMd27yVs8nd/Z31TWU/TDyQ8voGuXvdv
69nPTm9bAACcBarfoV42/uZvxl/2Nfa3DVVfgzhjGcSl3qn8yXd4aVJtFdX/
O7n169QYDsE2lSe+mM62AAA4C57xDH+5qMYiikN998BZZt9vKEcp/5r/20jq
20tJj22s1vfVgWOgvlENAMB59I//uPrM/NfTzcupen/nmwnqHQfVTyAtaswD
vex+/X3WGEtJ+vbAGInOdyABADhvlkt/majK4Dh+49e8ZR58MN00Ktc/acQi
z/e2qcY7Hn46ufWr/gz7vMMJAMDtQo0rsG0/PFVnoL59YC5zR7x6hk3Ue5B/
8ifW9IWb4fOov7/iVV5aVR8H1Y8wCa8P9Mc8RLwDAMAxUuW8XiZ+8zdtXkav
M8hEvJvw5ELk9/6D9W8cH73qT8dLX2osf3m1b4FK7795u3/eN73J2M7fxttO
FGfMZnfs5MJ+6wMA4KxaBGKDb/3W9fOrNgi9bl99j1mnnv/Vew7qu01/8Pvx
0/H2QHnvTN/1SpFPh7QdqLhB/570XXeJfPJ6/O0FBeONd75j93UBAHCWBesN
VJm+zod+15tXtSuovowONdaB8z5kPr9dOtT7j2r8YjV20ktf6m3jjjusbz6H
9T0c/KX1nQV9nCT1voSKT7alvjmpHwf1/UcAAM6jYH8D9S2DdV707d68P/1T
3t+v/r7/XYKHG/vV86v6CLXOTW0Sqt7jne/w78Orvsv6vsM2/tUP0hcRAABF
PWMH6/FVvBDmP7f98z36J9bfb8287yzp0zOfZdUffP7z6e+HStudL/TXN6jy
Xa/XWEfv46imD1xKNbkAABy1pzzFXy5GPXP/wL1a/cJz/P0E1TiCakyAzA+K
O4ayMz3vecmPRxBGjbGgYhF9f175SpH/+pnNywa/Q/mHf5RyYgEAOGLOGEbO
pMYaCvrc2F/m3v+26PXp3ydQ/QU/2Usv7WH6fZHvucefBvU9qag6BFXvEazz
UOMoAwBwXgXH/Sm+d3Ue9b1kfZ6rEe8gqLEO9Gfwy7+TbtrX+eAH/Wl+5Xda
/ReDrn3cP5/qN5H0uMwAAJwl7363v2w8+T7/76pPwvOfq/Uj+IroPoJqrAFn
vh/Opp/2TV78Yv++qfcRgt73Pv88L3vZ4dMJAMAxUW3retmo+vGp/v+O5h/4
f/8X3xe+HlUP77Q7qH6IX/jCQZK/lvp2ozsGwgtFbv331Xm+97sZ9wgAAJ16
1/AZT/eXj480vd9fd6//t6j3+9SYAM4892ZEfvtD1jP5W3Ii2R8y/vYvRd7w
BpEfe6vVbvHrH7DiDvWtBDW+QRr1+GpsBDNNd4T3e5h9cbXvJP0QAQBYfXZ2
2gPUs78aU0j/7VOfCl+HPg7RLtNXPtVqu1BjH6k4QsUUKrZQ/QZ2iSF+8Ze8
df/qr4bPc+lS4L3Lr0j3m5IAAJwVwX57qj+eqn9XZar+dzU2UljZrN5RfPoe
cUFSMcQjH7XGV1TvWnz50+w45w3R+x0c12DdvAAAnCfqPb5nBuoHVFygvq+g
/021L4T57Mgqo9WYxaqMVu8xqDJa/V19P/FLX/LPr9oxVP+E3p+K1B8W+fe/
ZX2HITg+4b6TSn9UPYBKX3B+VT8BAAAsr3tdoH79WatlpxonIE0qRlHfifa9
N/AS69tKqo3ggbzI6+8znvfvFnnuN66O26RP6nsP47+Kv7/f8NzdvsUAAMDt
qtvd/ByuxhVKW+23Vrdb/qXwedV4RpPPWf0M1TcYHr5i1UNc+Y/WWAtR1NiP
wbhC1XkAAAA/fTzB4BTV1yBpahtqnCJ926rvwEevJreN17zGv/6v+trDjOsM
AMBZ87E/jo4N1LcSDkXVTwSf65/1rHjfRtjkwx9e3Te+yQwAQLTv//7w2ODQ
3y3+yXespkH1Ldzn+V59E+oFz1/tZxA2JhIAALB85jPW2IjBcvkTnzhsOtS7
Dd/w3NV0vP51u7VtqGXC3oNQYzQBAID1/t0vrJah6ptMUd8yTMuHfje8DuNn
37f9uoJjNagpavxnAADgp97lC44LpKZ3vuOw6VDP+mHpUH0T/yDiW5Bh1LgF
zlhIbv+FZ4t87vPppR0AgNvN+HH/95ZP612/wZ9ZYyEG06HGX7jxF5uXV/0r
g20kKk5QYygCAIDtfPxjq99TOI344F3vDG9buOuu1TEXdeq7SWr85+By73vw
YEkHAOC2o8YkDCuX/83bDzeOoHqP4DnPCU/Ha18b3jfR7KsQ0qfyzW8+TJoB
ALidXfz18HL51a88XJt9vR499sJ73uvNt/x7kXw+fL7X/xDjIgMAkJRf/8Bq
fz5nvMQP/6fDpOFVr46OD648LDL4S+v7jGG/v/FHiQsAAEjaw43wsQ/Mdxzv
FRmt+bZRElS/xLD+D2r6mmeKPOPp4b8V3nWY8Z4BADiP1HeNXviN4WWwihtU
Ofz5FNsZ1Pqj6g5W3mX4CuvbTQAAIF1ffELkdfeuL5PfkhO5/snkt63GTH5u
RGyiTy9+kcinPpX89gEAQDT1LsBzQsZA8L1n+K3WOIa9P92vvX/8VyK/8Wsi
J98XPt6BM6nf3vNukScXye0nAACIT32/6O1vj+4HoE//9GtEXnuPNV7BBy6J
XPtjq27hv35G5OZU5LMjq0/Bo39ixR3v/VmR198n8vXPi9eGoL69/Bd/fsoH
BAAAmD77WZGffJvVnhC3P0BSk/p2pIonAADA8Zn8N6sN4du+Jd14QLVlqPqK
6/3T3mMAABBXtyvywLtEXvLS8LERtp1e8AKRt7xZ5CMfscY4AgAAZ9fsi1aZ
rr7F8KasyCu+03oX8qu+1t+3UH1DSb2H8B0vsfoa/Mx7RC7/jtUXAQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
YFvXr4rUaiKXr512SgAAwDF46OUiT3uqMRn/3jrtxJySm4+LPG5MN8/rAQAA
ZWmUA7e8abk87QThtFy8z44N7jmfscGTj9n7f87jIwDn0y3juejyRZH77tHy
Qm262/j7QzWRGzdPO6U4JGID7T44p8cAwDn0pMilB8LjgajpHmP+G0+cdsJx
CMQGxAYAzpnHjXI+pOzPGmX/JdX/7LLx70WRB7LhMcKlR097BxCLEf89ctnq
U3h9y3qf2yY22PEY+GKDrLkapG2P6xWIxHUVj3Gc7g+U9Q9dMfL/qL4FS6vP
+n13+pd54PJBU41dGIX63fb5enDLeO62iQ12PAa3tNjgnovpJQ+aPa5XIBLX
VSzXHvT3sbqxRcZ/9SFt2QfMsAHH7JZXP/TQY9stejvFBrscg+UNrc8NscFh
7HG9ApG4rjbT4ic1XX18+1WMPiJyp1FuUDVzBhAb7H4MtOWIDQ6EPBxp4Lra
SG9DvfOh004NUkdskEhscM+ltBIHH/JwpIHraiM9Nrj/ymmnBml78rrWp+Sc
xgY7HwMtP7lIfnIQ+1yvQBSuq8302OC0+mQ8+aTIE0+I3Lxp/Hsr3T4Lt7Tt
nMbyp22p3RMXr2+3bJzYQI2PpY7PTeM43Uq6I//SO/77rH/nY7Dns8Yhr/N1
Uj1Hkux+7nO9JmGp74vx75MJnbTzkOc9acz/xE37WruZ/D7uc25O+7o6C/S+
14dsQ1XjK9UeMvLawLsO+ruTV3c4Z49dMc61sR+XA3HO1Uv+fhVOv8vBrT2W
/2aRd7/fmN/4bbRHHju6Zq1DTY+nUJ4+Zqz/6kdErhj7dumCf2wK9Q7PpUv+
Se3/YyGdR6Jig6VxX142zuXdYefSOMYXjHXe3DFjuGWk4+plkfvvC79O7jTS
cvHKhnqMBI/BhTu3i6OXN61jE3Wd33e/kaZHk3sfMur6TfMcKYndzwmeq109
aazrirHe+14evi/3ZK1ztq3bIs8LWX5lHx+MuM5U3fRD2/V1D9r53BzBdXXW
LAfasTXO5yDtl7aNc1S7EH5eQycj7390i/6Rzpj/bt8J49xmI65Ttb+PL/dY
/hne/3/g6u6H5AFt/deTro8wyoQ74x5rbQor+8Jig8dq8de5zX32hHFdXoiI
B0Knde/XJHgMzGehmM8o1y9vsT3jGriSwPPLyvUr6Z0jU9L3c4LnahePPLTd
vsQ6XrdTnheyvOPyFvv40A755V7n5pSvqzPJOM/369fB/Sm2JT8R2JZ9rT14
SeSacQ6uP2aNR3F/yFjNl2LW4Trll9lXzIhz7gtuy4gFrxjbeNDYz3tC+l5u
s/z35LXf7tvt2c8Xm13YYQWbqLErjHv/TmO6++Wr98fdL1+d1Dy1weqq3Njg
Puu7GhcD42DdZ8Tfl424/LHrVoy+UravyVf09NZCxuZU9QMPXbKvE2P9j161
zoFvvpdHPPsmeAziuhEsj411XrxsHZsbN6zj81DIfu5bv+m7fiWlc+RI434+
hXPlbPdCSDofMPKIq9esa+6acdwuhIz9VluXN91meV7Y8qrAeCDwHH+3sc6a
cbyuG+dlNDLuV+P/ZwPz3Hcp3v4lcm5O67o64554NHBM79uv3ieUsb5s8Npf
863fJ25Y59I3f4x807nOs5eM86qVHWpcpjhl97bLX9DS+MgoxgYCHtNi4UP0
idH7l+zcF1HlI9p+322UN6OIcbNvfCRwP38kfvrM7Rjrvr7mGeqJ6/77/L7a
5v3Y5xjEctNfF3t/bU1b6y3tmfLlW5TLEZxzdLdx7T5wTzrnyEn3Ie7n1M+V
uRF/3Z2aLqzJL5583B9TRfbhvk3zPJ/gsTP+/9Ub0bMH69I21remdG4Ocl3d
Jq4+6D/+5jkw8rSbCbUxXA7EdNdi1pldDDzXbGrzCM4f9/7adfmRdq1vPVbe
0n/djw7QOS2p2MCZHoxRjoyu+OPOTWHnQ/dY5eS1mLGWL7a9c/M4G2nnC9cv
amXyg/GWedy4xgYJfJfkUOfoUPfzIfLwRwL1N5djPis+8mDEc7Ttds3zdL5j
d0+82Db4LLou30vr3BAbbOdqRHvOAxf3+55S8FnwyjbP10t/fdWm8jd4nW/7
XubWyz+hfYfizu3Kd/09mrsPNLZEkrHB5bj5z9L//PTYpoLnye37NNe0fPjy
mucWc/Up5wv6OKPXDtyX6RDn6JD3c9rnytemt2WZus5tnec5yQwcu236qj2q
lTUXIupS0jo3CrHB9h5/bPU7Ce41asRwj27Id8Po+XacOt+glWtwTb7lu87v
MYvureyy/CNaH5yHtui78qhWhlw6ULtWUrHBlS2vg6vaMdql7WWTx7Xn3gfX
1NsqaecLD2l1+Yn3Ld3gEOfokPdz2ufqslaHnmR8frvneYp+7Lbus/e41hYY
0VcrrXOjEBvs7sa11b4jzqT6han3XWI92z3ubw/eNa/U77V17aH6db7LOd9l
ef35X/XljHVc9D6gMerBk5JIbLBDv0u9nj2Ne1Hfr035SNr5wmnEfI7Uz9GB
7+dUz1VgXx5L6lvz5yDPUxmWu487joWml/0rsU9a58ZGbLC/m0be9mDEd5lV
mXZ5w3HVn+f2+XadPg7Dum86udf5y7ePn/dZ/kEtjno0xoJ6PHHIb/olEhvs
kBfcSvtefDz+8Uw7X/C13d+ZfL62Ttrn6ND3c5rn6nGtD2aSz6XnIc/Tj92u
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
SEa7RjL5svQmi73Sl4T16Teu8WLWf/yzOckb56DWGoSeg1jHfzmTfrdrXNfW
1F85/wvpt+tSzOcllzO2VyhJszsKWdFMOvWKFOz5CqVqSPkxN9dVKjjrKkq1
2ZV1V8Zs0JJyuWJMxvqm+l7OZdDz0t0bTNas5XyZ9617JZk8KbDuXsW6pnIN
Of07BtjEKFNzKg/MSaVWk2q1ak8Vo+waJ7aVaadkbCMjPT3LSzQ2UHlhW2q1
xvryLRVzqap7PqLc9Y5xyFRoSthTxHLSk0qxKMVyQ/Z/bJ1Jq1KSYrEs7WH4
M0u/mt1QDo6lnInYh0x1bRl1COvTv+b4R8TAsY7/vGdev+66yvr5n0g1YpuF
xkCbbxaZttbYLkGWIylFHft8PfzYm3Vy3ny+42Kk+9jO37GYD9KLDWQ2lIaR
x7YH0+TXDSTOeKZVeVO2vjGWXS5i1CMvF6HzDGs5M/7o6xtxYgO7/m5h1lNH
rtisx969mNy8fKz9C7WQevZEstVBxO/2MTb2v2vELYvpQMrZiHx7K0uZzWYy
TyAUGtbzZlpqg/ATMG4V3fRmy20znllMupIz/rvUXn3uXBrHepZo/4bF2n1d
n37n+BvXWs/KlxfToVTzdn1Zpiw7PTkb12/OjO9q0u/3ZaA/6y+HbtlcaQ1k
5jvnJXGj7lnXji9y0hqptE+llrePsxuzLKVdstJaavaN4zCWRsmp18j64237
WAXrAv1l3UKG/Z6R5o6UVJqytdD4NAnqnk6i6Wm5YT3mvRuVeag8KTpjMZnp
VLMO6xGxwTb5z755VXB169Kf8LYAlxMb1KKfHYx4t1bMeWVDoSoD7dl83CpL
ttiQQa9u1zfr+dVCWuW8ZJznnmxWMtmimFm4nbdW2j1pFL28rNT0l7HTflPy
7nNTVqrt8DbzcbtsrLskw4X339lCXYaDttvefnKSl/bIuc+MtJVyUqi1pV3T
yr5iTcburTg366N9z3qLoZHPZ6TUGln/P5+19juTlVzOmIrNQJzlxQZ957jo
z4J5q45x3K7Ydd15e8pJNld298ezlGG7ZpVL5pSRnL1M1th/M9Qy0lVSaXHX
lZecse6Gr95gIe1KUfKqntpOS8bdfs7cD2tu7dk2539OXUynvn1dGmVgVbtW
Toxz3exrJa+x3+p4ZXMl8YpxIx3GNZLNaOlT6TeOcaHWlZFx/vV9rXUn3nKx
0q/FBn1t/6dt+3rNmddr/OPvbN66fnO18Jhw2mtIvaPVvc06bhzg3B/zftV9
dnevymFttT7DuAc7+nGUgX1MciuxwbhVWqlfCH8OXrj3fvzYYG7cq1nzftfX
uBy3jPRk3b5D6p4tZLxzVqp3tW1suKfstLWM66jY6Eqnlo+ui5+PpF7Ka21c
FelPF+52uvWy1waWyUuzF4gCZwOpODGikf6CHVPVtOMVN/+xVtfS9jtr33cZ
Yz+G5j4WjTxCXePLScdYZ8bI+/x1s4N60biGnWtOpV87l8a93fUyJpl061q9
lZEuIwY1fzWulXqlIi3qJ7CXDbGBVjdZqjWlWXOu1YI43XX6Ne/ezJcqUjXK
Wm9dS+k3q1LIWvdcvlyRSqVulb1G3uqW2UZZ0WjW7Hsw4/b/mvWqXhnT6Rgx
ilN3vHrd9+26id5c/287XcY2G1W7/HfzQr2uOSe1ZlNqpZyvvHb6MWT0fHpu
lQnmc93SeIarlKx8Olc022Kqjd7m2EBUO4vd3y1npWdYL4TUG6/m/ZO2cw6M
PKdc1vItlf8VrW3oxzayjPDKzNDJTpezv+pvzVH0E4rK7/S8KqfVjZRaY9+x
8++X11fETd+ir8UD1r6eaOu2qlpipl+bz1evMGm5sYE6ZnGPv2uhXQdxLLx9
d68Dt10iI+Vm37xu+lXrfio0w/omLI1n3Kl03Vg2L76qkknbLQvLnb40Cuti
g/kOsYFIr2rdI82xdy30zb9lpTvV7lkjbfVWy4gV7TqOYst+vt1wTznz5Lxz
XzLKunoncDxUWWvva8G4v5v1irnvJbO89epaMsazTKtVd++HStfOO7S8rVCu
Sb3mxRHO8dom/1HH3rruykYc1/NiFqNMb6m4Tm9DNWLk4kkw3x1LyY6/VU1A
x05/rlyXTqdhxxz2+Z52zLSqfWt32na6ymZ9lNuvwYg36fWI3UXkr/Y1O2xY
13dZi28nHevay9et+Hlgxwb+dlQ/q843JwO9aLHzyny169aJOc9RVTPzn0pV
3Q+Zinh34sIqR/KrzxADp91irv/3idT73tJWfuHk9/a+Z8peHa9ZH2uXP/Y8
tWwg/18pE5ZWm0LE82NUbDB3+wjm/W0t1oFYLUd869LyOKdeOjKPn62WvcHf
c2t+d+OMkHR6M0nDrgvPFBru+Ro0AmWYuy59v/Tnei82cPLyUqNvPw9571tU
fe0wG9Kvrb9Qa5n979qNqhdThVxL0cfff1zixwaqrAqWkZZJuywr918upI1v
JV7S+iRYa5KKfZ5zZt+XpRYThe3EbrGBUy5l3f41dpmWV/Vlxj2btWMq91So
vqBWOVc3H4jj3FPOOcsa+xgejzp5U1GPoZbWvItRwzpGBe3cOu/rGPmJqj0Y
NQory/v7Im6X/4yaRTOOabszj8zYw8kng/2rrGeXjLTs5yAnPyh3Jkb6m1Ye
q+cpRvoz9vLzvpUHl0Lix+W0LzXjmWGljgTYilM+FqRhxPgtNRnPz822qp9S
9XohzybLoXWPFay680FYX4KAYLltsu8VPd/y9QXSnlcLxYIUCmrK2/X3q/2n
wmMDf7oGdozS12ODQN7oPJdb93C8fGxlnrBjHNj/xaBux/ch7d2hZaj5g7Ts
Z8FC3drerF+PPCb+7W8uO9fHBuvO8cwuEwL9J4xns7z97Gfm8VvHBnlf20N4
OuPv32oZXJbQYjPy+PvniRsb9Ny6tbx/fbOB1eZvXuNFrd4lI9Vu4KpYjKRe
Vn1K8+7zbaZQc/tKOs/zahu98USm477bf7TY6Ml0thKA7hYbuPFzQVSp57TR
m7Gqfc9myl3/Er4+flvEBpFpc/ImIw0hoYOXj/iX7pnvn6i436lX8Odt++Q/
065VXledmH1q1aO5+xTsez1p2c9YVvnfKXvpcWKUk0zO3m5B8k7cZ9dXOnGg
aitR76xM6XSARK3ri7iw6yRXY4OCW/cVUe4HrIsN9Pw8/N4sSK1Rl1q9LnVz
qkm9Gay3XxMbzKPmiYoNrOc4q+3Urv/U30Gwy7tdYoOeLy1OnWNI/rembFoM
G6HlnNdWG7X96LKztu75UnteLXej2jCnbmxQDo0NTqSh+nmE1kGElPlxY4g4
6deWKxll5Gg4kMFgKOPpmgs2sdhA9aVwyuyctAPPwFZ5YJSrHa8PRa/htBkV
JbIJRysbimZ7zcx6xg2Lf5ypHHyPZtfYQL9Pp/Y9VbDayJ22gcA7O2GxwaZ7
an3a5nY9lXGM1qQveD04bR+9uRPfxIkN4uU/eh+ibM475x2n0F7J75znMiPO
WFp1DJlyx5eOTKEiDWeb6l/few4LGXSaUnL7SxTD41xgJ+vvQaf/t16H68S0
Th+sbWKDYJvC2thAxlI2y85471glExuosQj0Z2S73DHmcfuKjZrms0MuEBuc
FNsRKdPqDcyVLGTYrrp5dqEZ0rdpTdk0sNvFy422tFstaXe6Mlr70LApNvDa
ZnO1sHLO+90s39z3+BdmX6lKe+TbRrbUco/V2K0vt/ddexZzrqnFuOO1FewU
G2xK/3xD3XqIJGKDxViqeadsLgTGGLDS5bTD+PbHjcWcdi3V57Ikdd87xcH3
GZYy7BrXQ1tNHXPqGOWG056u2qx7w2Bct/7eX86mMplGVRRNpaLKwVzBbJtx
yjTVrmHVVfif5zvlrHb8491Tm+IWJ2+qhMSrC7suI1PS7kn33RHrPRGnzVHv
N+G2ae6Q/yzHVl8Ps19WoyGtTs//LB+S31l1lBmp2P246nZfXCf9hXpUv8el
LPSuM/Z9ZtXZLWU6mSTy/hLOM+8+Db0H3XesslJtGvlNq+r+d8e+JePEBs59
XKq3pWvkWyO7v9z62ECVLfYzVK4k7d5A+t2WlIyYvB5Sxm0TG/j6G6g8qVQz
+/RUC1Ye5uV1zjwZsyzuNL0yPbfSbyonDaOcbrf7EX0RT6yxd/RnuXxNQp/E
tX5r/r5wSzefzeZLUtXGpKjVm9KfhD83r2+PV22lXj+8bKFo1lv7nu2NMl1/
Xz6Tzfr6Har5fPUZ2bwU8974QU69qd7v0DyGOW+eqNjA12cxYj/Wp3/z/sc/
/qvzhMYG6hky8NyezXj9KZ125GHDSXdGCuWq8WxY8fpB2O+EOO8tuMe1WPCN
q+Dvc+BLYHgfTNea8jfYFhRCf6+1rr3/4t6zWeOe7XalUcm7++PvGxrjnlr3
/tS04/bjrBh5U7/XkmJGnY+e6HFXvtyQrhE3lXNOPYtV0+D2STDOcb3dNdMR
7Iu4Tf7jPDMVay3pDwbme629Xl9Gzj0ZNp6LVq/m9INw9t9Nf6VhrK9vpE+9
R1M265KsvhYZqbV6MhoNpGH3oW6OFl4/pkLwfSlgG3YfsjXx+XzY8veFN/Lc
1tC7vq38bX1sYFywbp9i696bu3mrfq848XJNW9mgGeirpd5F6q+WqMF0hKXL
6m/g1CM6dQRqnVoeXmz4yuv5sOnLi8vNtlmfq7+7Nu1WfcfHnxWvtndnjDy+
0uxF1+W6eUZ+5biOm3n/8fBNYWWZl8/UIsvGqflumn9dWTOv0Q6E//1EM/8v
SFu7Fvzve1n5tqrH943KZ45Lqx3vUl1adr9797y7sUFBO5be+Vp9/l+X/jj7
H7Dm+HvzrIkNfO+JBOLBE71+w6p7Cf6u3hMeadsdderue5r6sQ+7Dzze8aqH
jnm1JjZY2s/MJ8F+n/5jZMaLK/1lltJvlAL7o78XHOeestPmxhPhZoNm4H2c
nFe/YuxDreC/JoLX4qhd8f9eLbv9/Rxx8x+Zd1fOo7te1Zc7JL9TnFh/ZTxz
I/31wP2m3slW/Uvmo44Ro/jHsCja/Y/c2KDYZtwDHMBS5rO5Oe1+vS3M8XA2
jUMSvnlr7Jtkx9Oxn03s96bn06nMotK2mFtj76wZgEWNvzJTY6ik+Z0Brczs
T43tGWmeGumaGnmF81y/z5huy7mxruks+jiIvZ/qWK05F/OZtZ7IQ7GcG7+v
Od47ipP+xGwY32DLlZnXl0r7umtsYe5fUsdtw/gGdl+5VtTAkPZ4DZH7v7Tv
mT3uqXiW5vU2i8ibFvP5+jHC4qQjRv7TNfs5GvflbGGN42bs92zU9vdH3MHS
SX/IDrj7FjjEc3ssJwC72L0v1qlx34fPSaM3NOOCyXgorWrE++5IjxunZc1x
ksph/UaO0XIkFTW2k9PnPqTeXo1lZF5PIWMyL+dTGY8Hdl+KrHQZcFm8dqui
b6ysSdd6ht8nNgBwaHO7b/dZGk9+Lq1ysO7ca8toDs7Onpx5gfGlkvw2War0
Nm6z/G+sxMbLaU9qvjHMPP2KV5ddbif3zZWzznmH0Wwz1PqWnGQrMiJeB86U
2WTk9RU6Q1S6+72udNpt6XS6MhhNqEPEQSymYxkO1TugXHFB88lAOq2mNJsN
aTSa0h2MafMHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjtBsPJBOuy3D2TLwy0L6
7boU83nJ5XKSL5Sk2R2tWdNS+o2qlCtlqdQ7xtLOn8fSqFSkUq1KNTgZf682
+xLc8u7ipnkmnXpFCvZ8hVJVeuN56Brnk4E0a2q/6jJahM5ykDQvpwOpV4qS
V/PkC1JtdIy9WEmtua5SwVlX0Ti+3ZD5DpHmhXTr1ZXzXilXpDNebLmuQ6U5
7nHWVzsy5jeu+XJZGt1JwmmOez4X0mtUzDSb13O5sXKtLic9634Lno9KQ8aJ
XtcJ3YNHlW8YeVuzZhyrkLRUK9YxdBNzTPfgsV3POBsW0qnk5OTkxJzKPf2K
mUg1d+L+pk+FxiB0bbNuxZsvW/Wuv3lPsiHrcadMNaH7Jm6aZ1KLmK+lZ5KL
oRQz+u9Z6YWHD6mneTnphB9D4zi7d+9yJKVMxDHO1xPMm+If52o2fL6Ke61t
f52lmeZYx9lnKe1Sxp0vW+knl+TY53MhrWImZL6iDLTLed6vRtyDmQSv6wTv
waPKN4xrOepc2HlDVx3DI7sHj+p6xtkx70vOvMcK0uz0ZTLXovDlUApOPt4a
yMyIPctuPl+S8cq6eta6nClXEze7WU6M+N+IQ9UzgDkZsXZZi0k6CcWmcdM8
69r3S05a5sPVVGp5+16oavfCSt6Uk37SsUHMNHfLWftvBelNFzLp1rzj1506
K3Pv65LxTDWbGc9dJWe5BOOauMfZub5UflWumM965vlX9QbOQ+2211nKaY53
nD2TTtmX5+aqSeal8c7nctT00mjs22TYco97vjF01zYfWPuSyRXNZ3Hnfiz7
nnn3TXKC9+BR5RtLGTRrxrGquOmp1rRnoULTric9rnvwuK5nnBkLK+/O1cKf
z6a9htQ7Wu4867j3s/8an0s9H4hL9dggbN2dihtLJ1ncxkmz+/xkPHc4j1WL
YS3kXljIeDiSYa+eXmwQK83GM5Z931e0+3lQLwTyJTXrUDp9Pc8c2OVE8Jyl
nWYxr6+8nVet5kJbrusgad7iOJsr7HqxYyalvDTG+RzW8276nCJ+0irZ96F3
fzmxQb6eRnuNJ9l7MLDuU8w3VrjXd1a6eoXA0dyDR3g942ywY4Ns3PO/6LvX
uF5GDhv2tXaSl964b8Wz62KDubeeXvKNcJvT7NYHZKRsxPbq/uhXrfy10AzJ
N5cDOw9IJzbYnOa5W//aGHkPeMtRw64fDDvWS1nMp9KtFd1zM0ilr0RUmkXL
O/PS7LSl2WxJpzeQ6aZ0RFxn6ad5m+Ps1Ylnig3p2Pltenlp1Pn02hOq/Zks
JgPpDSaydO+xgnvep06bX6Ys7XZLWu2OMe84wTb7CEncg+Yyp5xv+GeQZsE6
/6V2VO3Wad+Dx3w946jZ92e82EDVldn1U8WWm58sx159Zt288O1ydE1s0Kta
9YIFrb4zHeFpViZtf92Z84wVeuu6ZdwhYoOwNC+N/N++b3NlaXV70mnVtPaO
vD9di76/feck0I/iIGmWNe3FWbseeYt1HSTN8Y/zoGY/q2es+tuR/eweVQe3
l7Xn08n/c9IZ9uzr9ERq/ZFdl+c9q/Yr2ZBzoa77qLbnJCR0D8px5BuOxdAr
X0PDlKO4B4/0esZRG3dqkrfrjYqtzXWMPefa0cuh5UjKTr+bYlMm06mMB3Zb
Z7Ys/fFEZsHbYTFwnyX7ad4qUWlWZgMp2XVthWJRu1cyUg3rl3vA2CAyzXMv
zW5bYM7uM5St+uvsVT/jckmKxbxk7HkzhZpMUipoI9NslFu9Rk3q7b5M53OZ
jftSyWfcPDXsUEav60BpjnGc5065cKLavIcynY6laT+7Z4z7YDydJRvTrD2f
zvOeEW8N+1Kyf28OR27M4PZLmA2lXq0ZMcRY5vOZjHoNrz9I1LP6npK7B48g
33At3bqacieitexY7sFjvJ5x1PoVry9qbbjuZltI2+3/k5O21mlp3qv4rrmw
qRyo/Js57Yz5RuTzgWUp0/FYxpNdCojoNCudsrXvFbcvk3r/y26fPSnKaOVV
zrixQXppdsynExmNRqI2sXDrBtf0116OpZJ1YsCwus/00+zb2rAe8by1zbpO
9zj3KmHvBPin7krS9kmzvprg+Vwa17P1vGi9+7GUhbqxFk6dTVGGaw5lz35P
Kbzu8HjuwWPIN7xNOP0AY/YfOIJ78GivZxyf5UJGner6eqPFWKpuH0PVzzVw
3c3H5rgI7U5HOsZk/tuqWnmSeveh3ZFRYMwEp+5qfTvWUutfeyKl0PspwqY0
G0+rDft31T7rLefUAYb0JY7V/p1mms2ZZNDre+XpwquzydcH7jztSknqXX3b
Ee9gHCDNqq9UudbR6geW3vONHs/E2v/DpDnOcZ6NetJW171xfat/O92OVJz1
5ivS7g4CdSK7pjne+Zy07TJVe0fO62/m1C8vpFMtS6OnPZOrfcsGr6F90yyp
3IOnn29os7rxbSWkj+1x3YPHdT3jzLD72IU+M6j3dAOxYzbjxZf5qHjC6bcX
2m7o9d8prq3DnLv9a616rXa8Oq2Yafb6TmakUK5KvV5x21dUumdOWovG9W8s
n9HWl7H/e3X/006zU2eYlXw+p6Wp5L5/5vTztvKtvBSLBV97/2p7Z4ppNuYp
uL9nzXrjnPbed9npv7X1dXb6xznMcG377G5pjn0+jX0ravMV8l6+3bDrBN3y
TG3fXFde27ewuvNjuAfdI3EU+Ya7Fft9j7A+VUd1D8pxXc84Q9x3GENiA7ce
3bp/M4HrMHQZfbnQvojG84J9j9cG6+uipr2615dnXZ35TmlW4/WVVn7PFqoy
cpPlPduETWHPL2mmeTHpSTmXWUnvMHAYR526rwy20lKQZj+8XTTdNPelUgj2
f8tKtT3ael3HdpyDnLIuKmbeKc2yxfmc9QPtylmp9/zzjLsNr/x18vVcSbqT
8Fr6078HHceSb9jbcN73yIW/R3lc9+BxXc84I+x3gjKl44z7FnYbY7bSS2sL
MpvNZDqdyXyRzBFIO82LuUrvVGbz9en15tvccSvtNC8Xc5mptMzmiV1nx3Kc
t1rnHmmOdz6X5vWspnXJPqZr4yzeg7HTcUTH+diuZxw5vS7SiD0bm4LJg1nK
sFN1Y+FmOh8xSBhpPgzSfBik+TBIM46TWedUsNoeN9XXHcxi4LbRhb7PdIxI
82GQ5sMgzYdBmoGtTAZ9ifgs4tEizYdBmg+DNB8GaQYAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAB2MZd+uy6lQl5yuZzkC0WpNrsh3+peSK9R
kbwxj5qvUG5I2Ke5FpO+1MpFe768lGstCft0/LjflU63L5MEvycKAAD2tBxJ
KeN8vzkw5etafLCQVjETMl9RBnq5P+243+7yTdmqTH0bnklF+70+WI1EAADA
aVhKu2SV+aVmX2azsTRKWbvMzkrP/gbXctR0y/FyayCTYUty9n/nG0N3bYNa
zpovVxP1Vc/luO3O1xwvfNudjgbSrpes+YttofYAAIAjMRtKp69/n3tgl+c5
NzYY1vNWGV5oumX4pGWX67m6OJ/x7Fet2KDU8WoJehUr1qj0wuoGZlLJWPUK
1BwAAHBslrKYT6VbK9p1BHm7vcBrT6j2Z7KYDKQ3mMhy3rdjiILbrjBu2ctm
CtIeqtJ+LGWzzSIjnWnYNudSz6nYoEZsAADAMVn03bp/Z2q5bQBzqeWseoTO
sCd5+/dafyT1vL9+Qc3byK/2Nyi1xhEbttdtxAYh3RUBAMBpWRjlfLkkxWJe
MnZ5ninUZGI2IMzs2CArrWFfSk7/geHIjRmc2GDSq9nL58x1eX0Ri9KfhfUo
sOsNjHlyxVroew8AAOCULcdSyVrlddF83l9Kp6z3GVjKQpXhi579TkJRhqrY
XwzsOoW89J0+jHMjfihay2YrvdDNtd16hoxW/wAAAE7HQtqVktS7ep3/VGp2
eZ2t9s2/TNqllfcaB/WC3T+xZfVP1PofDLUqglm3bC/bCGk3sOskMiXpTwgM
AAA4bYthTav3z0uxWPCNT+D2OViOpKjNV8hn3XkaQ6fEn1jvHJh9EfNSqdWl
Vim6bRTF0D4HXl9EIgMAAI7DqFOXXHD8o2xBmv3AiwWzvpSy+nxZqfcC88yH
Ui1k/es6yUip3ovoa8h7CgAAHKvFfCbT6VRm83UdApcym83Mad1Qx8vFXGbG
uqbGfGu7F87s9x60MRIAAMB5NJdm0atfyNWHmxcBAAC3sbk0Chk5yeSkXOvQ
ngAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICjMWqV5SRTlMHitFNydixG
LcmeZKQxmJ92UlKykEG7Kc3OUJannRQAQKIGtZycnJzYU0YymRPtv0+kZpRt
1jw56d2uxZxuOZNepyuj2X4l3rxfM49ftT9LKGEhEkrrTuue9yRjXzPd83Bd
AMA5Mu42pFKpSq1WlULWigeK6r+rValWatKbLN3YoH8eygC7zKv09ivT54MD
xAYJpXW3dc+l16xLvdUXqpMA4PY1rOfNGGAQeFR0YwOzEFjKfD6PrkdeLozf
45YWG9a19/I7/L4cSFaV6VENKBv2b2GsT/26HNbjxQZbHa/gshvS6qRnlwMc
Y93hG9xjfwAARyeqfsD5e7PbkoLb3pCX9kgvA+bSrZe89ohsSbrj6DJi2m9K
3m2/yEq1PTT/vhg2zXb6cnPozturFcz+Dipd43ZZsvmqdDt1s+wyl88UpDWc
xVq/ZWE881a85Y19a/TGZh+BXCZjrzMrWWOqu/0FNuzfbCCVfMbdXqFg/f9a
ZGyg1le26+XV9vLS7E28FKq0GOtpDr2TYR2bnLSN7UamdTGUUtbY31Zbqnmv
rajc6Lsx0M7r9llIq5STXKll1xvMpF0teMcnV5LOcGofmrZUKnUZptH2AQBI
VXRskHfz/IKRxzeqRbt8rIk161I6JassyZXr0uk0pJCx4oewx85Zr2ovX5Rm
pyO1Ytb870pPlSUzqeWs8qyt/nPSMn/LlNpm2dbX+kcUqw1puuVrTpzq7/Xr
N9Jatv47ky9Ls9kwylJj3nxTvjTuSiln7Ue2UJZKuSIds/zfsH+LgRszFco1
qde8Mj+83mApbXt9mUJVWq265O35K12rPA3rr6C3Uyyi0rroG+X+ib1/FWm2
GlK024pK7fF+6/aZS02tN1sVtZZhw7pGirWWdNrW8clWuuZ8VTtGK6fR9gEA
SNX6eoOM1PtT929W2Wb1T1yMmmben68NvIXs9urVsnFqlRWZinhrW1jlTL5h
PYPOutYzvVF2l81n34IMF/60NLU6i0mnbG2/Pty4/i/ZaT3J18XbzaX7TO20
BdS0oGbT/o0a1vNysTnyfl7TF3ExalhpKDS8tnpjfWZ8YKRb1R6E9VcI/i0s
rU5sUGjoae1b685ZsdzO6/aZSz3nxYf9qhVvtcardQOTXlPKRszUn1JvAABn
zaY2hb5WTAzsvglqXqccPMnkpFAomFPeflbNVfv+lc2959pCsWDPn7eeszPW
M6gyaZfd+gG9DAtLi1MeZtW2Nqz/c26ZHd6xMrTcXLt/n7TjJH8dybq+iN5v
/jT0KlmzPULFW3HK79BtGMfC6iegr9srx2dR+xhn3f698MUG80HDrStRdQ2t
3ph3GwHgNrAxNpiH/80pRzKFijTqdanXa8Zk/FurSXsw9a/MLbsLUmvUpWbO
by/T7LnP0YO613ZdC4sN9DSGxgbh6/9rO621iHEH1pWb4fv3uDQLq+0ncWKD
YBr61dxKbFDr630C6vFjA992w2ODrdft3wtfbGD9aSztRsWNzbLlDvEBAJxx
u8YGTrlSqA9ls7GUT7x26jBLpw6/2pByzirnB742Bf9YC6Om1f+h2BpvXL+T
1kyx5Su3lvZ/uG0Bg9VyM2r/nDEimlp9+rxfjW5TcNJQamsJGNp9Fkoy1tJR
6nj9E514yS2/Q9LqxEm+dw+nHauNJme1o+y8bp9AbLBcaMdzIc1ixo1zZDmX
yWRKnAAAZ9AusYFVRs+lYfeJz1ca0h/0paPeA8iWZRRSIIzbJbcve7s3kH63
JaVcTupmuTSRitl3rWiWkcthw9cX0e0XqfoZtjvSct8dKMpwGWf9dplm9yvs
9XtSL6m6/LLZzq/KUbNuPF+Rbq8jHbPeY/3+uf0HjONRb3eN36ob+iJq6ys3
pNtt2zGQim/sPgtOn4uTvDS7XWmUvT6Y7jrD0rqw+xaodxPqVr9Ap5+jW/+y
67oD+1Bz6yLseCxXlnZ/KMN+W4oZp41oYderRLfjAACO11DrQ+D7u9nXLhAb
mPNq9ejLsdSL+hiLqt25LpOIh8VBs+yb13yHrz+VccuqA3D66yvdqrXe+nDu
xgaZbFZbtrDSjz5q/abFSKqFrO/3QrVt140vpF32fstU+rH2b9Su+H4rVcsR
fTG941ULpKHU6Pmerc13N93fC1JvlN3jIFFpdd5TyOW99yONqdzy13nstG4f
O8Yy6yIW0m9VtXdCrTipZa5rKa1iZm07DgDg9racz2U2m8l8HqMGebkw553N
4pcZVn1F3hyfaTmfydRYft04TOvWv5jPrLSGdMVXv4WNm7R2/xb2b1sMNrRw
1hexyMJO/7rRhHxptfsb1MwXO+YynU6TW/dGS5kb65uvnJOFuQ4AANJwrsZv
3oVdb5DqWM0AABwR6z36zPn47tMu0vzGAgAAR2g5n8poNOH7PpEWMh6NZLrT
RxQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHHNxgPptNsynC0Dvyyk365LMZ+X
XC4n+UJJmt3RmjUtpd+oSrlSlkq9Yyzt/HksjUpFKtWqVIOT8fdqsy/BLe8u
bppn0qlXpGDPVyhVpTeeh65xPhlIs6b2qy6jRegsB0nzcjqQeqUoeTVPviDV
RsfYi5XUmusqFZx1FY3j2w2Z7xBpXki3Xl0575VyRTrjxZbrOlSa4x3n5aRn
XbvBfas0ZJzoNRL3fC6k16iYaTav53Jj/bW6GBn7aNyn5bI0upMkEyyJ3YNH
lW8YeVuzZpzfkLRUK9Z5dxNzTPdg3HxDX22a1wbOhoV0Kjk5OTkxp3JPv2Im
Us2duL/pU6ExCF3brFvx5stWvetv3pNsyHrcKVNN6L6Jm+aZ1CLma+kZ+2Io
xYz+e1Z64eFD6mleTjrhx9A4zu7duxxJKRNxjPP1BPOm+Me5mg2fr+Jea9tf
Z2mmOdZxNsz71YjrOZPcNRL7fC6kVcyEzFeUQWh8sJR2yZs/W+knlGAlwXvw
qPIN41qOOhd23tBV5/3I7sG417MnzWsDZ8a8LznzHitIs9OXyVyLwpdDKTj5
eGsgMyP2LLv5fEnGK+vqWetyplxN3CxyOTHifyMOVc8A5mTE2mUtJukkFJvG
TfOsa98vOWmZD1dTqeXte6Gq3QsreVNO+knHBjHT3C1n7b8VpDddyKRb845f
d+qszL2vS8Yz1WxmPHeVnOUSjGviHmfn+lL5VbliPuuZ51/VGzgPtdteZymn
Od5xNnZtYP09kyuaz7XOtV32PT/unehY53M5anppNPZtMmy5xz3fGK6sddIp
+8qJXDXB/D/Je/Co8o2lDJo14/xW3PRUa9qzUKFp15Me1z0Y93p2pHpt4OxY
WHl3rhb+fDbtNaTe0XLnWce9n/3X+Fzq+UBcqscGYevuVNxYOsniNk6a3Wc+
47nDeaxaDGsh98JCxsORDHv19GKDWGk2nrHs+76i3c+DeiGQL6lZh9Lp63nm
wC4ngucs7TSLeX3l7bxqNRfacl0HSXP84+zEBvl6Gm0fmhjnc1jPu+lzwpJJ
q2Tfh4H7a9r14t1MOvl/svdgYN2nmG+scK/vrHT1CoGjuQe3yDfMFaZ/beCM
sGODbNzzv+i717heRg4b9rV2kpfeuG/Fs+tig7m3nl7yjXCb0+zWB2SkbMT2
6v7oV638tdAMyeuXAzsPSCc22JzmuVv/2hh5D6XLUcOuHww71ktZzKfSrRXd
cxNev5xWmkXLO/PS7LSl2WxJpzeQ6aZ0RFxn6ac5/nGeOu1nmbK02y1ptTvS
G4wTbP8OijqfXntCtT+TxWRgpGMiS/ceK2jn3avHzxQb0rHLiNTz/yTuQXOZ
U843/DNIs2Ady1I7qnbrtO/BbfKNU7o2cJzs+zNebKDqyuz6qWLLzQOXY68+
s25e+HY5uiY26FWtesFCSH1nssLTrEza/roz5xkr9NZ1y7hDxAZhaV4a+b99
3+bK0ur2pNOqae0deX+6Fn1/+85JoB/FQdIsa9qLs3Y98hbrOkia4x/nfiUb
sl/qGopqx93D2vPp5P856Qx79nV6IrX+yK7L855VBzW7fiFj1TmP7PqGqHrD
ZCR0D8px5BuOxdArX0PDlKO4B+Nfz6dzbeAYjTs1ydv1RsXW5nrRnnPt6OXQ
ciRlp99NsSmT6VTGA7utM1uW/ngis+DtsBi4z5L9NG+VqDQrs4GU7Lq2QrGo
3SsZqYb1yz1gbBCZ5rmXZrctMGf3GcpW/XX2qp9xuSTFYl4y9ryZQk0mKRW0
kWk2yq1eoyb1dl+m87nMxn2p5DNunhp2KKPXdaA0xzzOy9lQ6tWaUR6PZT6f
yajX8PpWRD337mrt+XSe94x4a9iXkv17czhyYwYVG8ydsuxEtdMPZTodS9Ou
b8gY9+54OkslDkvuHjyCfMO1dOtqyp2I1rJjuQdjXM+ndW3gOPUrXl/U2nDt
y07Sdvv/5KStdbSa9yq+ay5sKgcq/2ZOO2O+Efl8YFnKdDyW8WSXAiI6zUqn
bO17xe3LpN7/sttnT4oyWnmVM25skF6aHfPpREajkahNLNy6wTX9tZdjqWSd
GDCs7jP9NPu2NqxHPG9ts64jPM6Gnv3OT3g93D5p1lcTPJ9L43q2nhetdz+W
slA31sKpsynKcKnSFvYeg3/qriTteO7BY8g3vE04/QBj9h84gntw3fV8+GsD
R225kFGnur7eaDGWqtvHUPVzDVx387E5LkK705GOMZn/tqpWnqTefWh3ZBQY
M8Gpu1rfjrXU+teeSCn0foqwKc3G02rD/l21z3rLOXWAIX2JY7V/p5lmcyYZ
9Ppe2bTw6mzy9YE7T7tSknpX33bEOxgHSLPqK1WudbT6gaX3fKOXs7H2/zBp
jnucO9WyNHra862aLxucb980xzufk7ZdpmrvyHn9zaz65dmoJ211rxr3pPq3
0+1IxTkW+Yq0u4NAPc5x3YOnn29os7rxbSWkj+1x3YNxrueDXhs4G+w+dqHP
Oeo93UDsmM148WU+Kp5w+u2Ftht6/XeKa+td527/Wqteqx2vTitmmr2+kxkp
lKtSr1fc9hWV7pmT1qJx/RvLZ7T1Zez/Xt3/tNPs1BlmJZ/PaWkque/MOf28
rXwrL8Viwdfev9remWKajXkK7u9Zs944p733XXb6b219nR3Dca572zePc16b
L6weerc0xz6fxr4VtfkKeS/fbqypExyubVM+hnvQPRJHkW+4W7HfUQnrU3VU
96DEu57DpHJt4Oxw32EMiQ3cenTr/s0ErsPQZfTlQvsiGs8L9j1eG6yvi5r2
6l5fng11udunWY3XV1r5PVuoyshNlvdsEzaFPb+kmebFpCflXGYlvcPAYRx1
6r4y2EpLQZr98HbRdNPcl0oh2GcvK9X2aOt1HdtxHncbXlnm5JG5knQn4WXx
TmmWLc7nrB9oV85KvbfuzVGvfI6K80//HnQcS75hb8N5RyX4fqjtuO7BeNdz
UCrXBs4O+52gTOk4476F3caYrfTS2oLMZjOZTmcyXyRzBNJO82Ku0juV2Xx9
er35NnfcSjvNy8VcZiots3li19l5O87xtrM0r2c1bUh2/O1yD+6ejiO6B+Ne
z1ut80iOM1Kg10UasWdjUzB5MEsZdqpuLNxM5yMGCSPNh0GaD4M0HwZpxnEy
65wKVnvppvq6g1kM3Da60PeZjhFpPgzSfBik+TBIM7CVyaAvEZ9FPFqk+TBI
82GQ5sMgzQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAu5tJv
16VUyEsul5N8oSjVZjfkW90L6TUqkjfmUfMVyg0J+zTXYtKXWrloz5eXcq0l
YZ+7H/e70un2ZZLg90QBAMCeliMpZZzvNwemfF2LDxbSKmZC5ivKQC/3px33
212+KVuVqW/DM6lov9cHq5EIAAA4DUtpl6wyv9Tsy2w2lkYpa5fZWenZ3+Ba
jppuOV5uDWQybEnO/u98Y+iubVDLWfPlaqK+6rkct935muOFb7vT0UDa9ZI1
f7Et1B4AAHAkZkPp9PXvcw/s8jznxgbDet4qwwtNtwyftOxyPVcX5zOe/aoV
G5Q6Xi1Br2LFGpVeWN3ATCoZq16BmgMAAI7NUhbzqXRrRbuOIG+3F3jtCdX+
TBaTgfQGE1nO+3YMUXDbFcYte9lMQdpDVdqPpWy2WWSkMw3b5lzqORUb1IgN
AAA4Jou+W/fvTC23DWAutZxVj9AZ9iRv/17rj6Se99cvqHkb+dX+BqXWOGLD
9rqN2CCkuyIAADgtC6OcL5ekWMxLxi7PM4WaTMwGhJkdG2SlNexLyek/MBy5
MYMTG0x6NXv5nLkury9iUfqzsB4Fdr2BMU+uWAt97wEAAJyy5VgqWau8LprP
+0vplPU+A0tZqDJ80bPfSSjKUBX7i4Fdp5CXvtOHcW7ED0Vr2WylF7q5tlvP
kNHqHwAAwOlYSLtSknpXr/OfSs0ur7PVvvmXSbu08l7joF6w+ye2rP6JWv+D
oVZFMOuW7WUbIe0Gdp1EpiT9CYEBAACnbTGsafX+eSkWC77xCdw+B8uRFLX5
CvmsO09j6JT4E+udA7MvYl4qtbrUKkW3jaIY2ufA64tIZAAAwHEYdeqSC45/
lC1Isx94sWDWl1JWny8r9V5gnvlQqoWsf10nGSnVexF9DXlPAQCAY7WYz2Q6
ncpsvq5D4FJms5k5rRvqeLmYy8xY19SYb233wpn93oM2RgIAADiP5tIsevUL
ufpw8yIAAOA2NpdGISMnmZyUax3aEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAOIP+f2zLrQM=
    "], {{0, 444}, {519, 0}}, {0, 
    255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJyVeQc4le////2c6RzHsffeK3uTvffewsGx57GpzGSVCCVUVERFy0haIimJ
Cg3JKFkVFSXk/xj1+fy+3+v6/67ffV3P/bye9/2+3/d73Ot9Dr9PhJ0/AgAQ
TQVXdqR4XQqFlGhPB384hkcHBYST/UzDY8gBZIqqDwQTFTnhCnAqkiIjQxEw
V1h4DMXOWI/PxdWNDzsBUIAJMAJFQE3yjY7UtbGx2OT+8/6fZXkIbAoEz6U2
Zf13+/+30PuRo30BgGxg7OMX7RsG4+sAoJR9IykxAKDnYbpgfEwkjDGbtjBR
YAVhLLSJA7ax6ib22cYWWzwOdvow9gaAikAiUQIAIG7qxRfnGwDLIebDbQzh
fkHhMOtpGGv5BpL8AOAYg3l2hYVFwJiTAGMxn3/JCfgfMn3+yiSRAv7ibVu2
CpVBUHRkKCnx/+iO/72Ehcb+GUMQfgiBFBO7TZs3/RYSYb6JYd2hh+E+VtYw
ZoDxiyC/Lf5NPBUYa+K4w//TN1of9hlgAQBB8CMZmMOYC8YC4aFWFjt0Lf8g
I1MYw75HOATFmDps90X4USLsduQjEsjRhvZ/MImyNdYmT25siKPujsyTgWTT
PzLbkgIdnLf1RPTHBTlZwZgI45HoEHvzHZ7ZpEB9qz88lFi7TZ3hmCOBP8XI
bpsHKRQW/ccupHpgkKnVDraICXQw2e6L9PQlbenGBuNgcrSLxR89/cgGhtt2
IdPJ4Y47+iOLImP07Hb4z0aG2uzwI9vJocabdAEY90XH2f/puxADT7Zte1Eg
MsbGYVs3FFMwycxmWweUBLAA+sAA8IFY+PEBESAYBPXNt8zDX9stRoAEKCAA
kIHUDuVPD+etlnC4tgdJ4BOMyCD6bz+9rVYyiIPp63+p27UU8N9qjdvqEQKm
YBwGzEEo/B271Sv872hO4D1MCfqv0X1hXUPhZ7Ptv2h8tH9oGEOMAcYEY4QR
R3GgtFAaKAu41oEfeZQqSu2PXv/wo6fQA+gJ9CB6DP3KKyid8h+a8wFLMAbr
aLRjnc+/rUOJwFKVUHooTVg+LBvFguIAUihFeCRdlDY8thJM/beusX8t/seX
O7JwsjgEjhWngxP7Tw2IEkSlv1I2PfVvX2zr5fPXW/p/W/7TDv1/+c8Pfpv/
JycyG3kN2Y28h+xBtiNbAB/yDrIV2Yu8tYn/zo33W3Pjz2h2W/qEwHKC/ms8
0s6Ym16Llr0gOyO7ttMGYsgJMZuLRT8iMpESFBAYw6cL79ZkPtNwX+ldfPKy
cvAuurn3b28t3+y29nSI5ek/NPI0ALvhOY/r/4cWfBSA+i4AWHP/oYm4A8C+
C4Arz3xjKXHbNNRmhQZ4QAuvFHbAA+9dYrBF8kAZaAAdYAjMgDVwAK7AE/Zz
IDxPKSAe7AVpIAvkgSOgBJwAp8AZcB5cAldBC2gH98AD8Bj0g0HwBp4rH8Ac
WADLYBWCICxEAzFC7BAvJAxJQvKQKqQFGUIWkB3kCnlDAVA4FAvthTKgPKgI
OgFVQXXQFegGdA/qgQagV9A4NAN9hX4hkAgCggnBjRBByCBUEboIc4QDYg8i
ABGFSEJkIg4jjiOqERcRzYh7iMeIQcQYYg6xhARIaiQLkh8phVRF6iOtkW5I
fyQFuR+ZiyxFViMbkG1wpJ8jx5DzyBUUBsWI4kNJwfPVBOWI8kVFofaj8lEn
UOdRzahO1HPUOGoB9RtNg+ZCS6LV0aZoF3QAOh6dhS5F16Cb0F3w2vmAXsZg
MCwYUYwKvPZcMcGYZEw+phLTiLmLGcBMYpawWCw7VhKribXGkrAx2CxsGfYi
9g72GfYD9icVNRUvlTyVEZUbVThVOlUpVT3VbapnVB+pVnF0OGGcOs4a54dL
xBXgzuLacE9xH3CreHq8KF4T74APxqfhj+Mb8F34Efw3ampqAWo1alvqIOpU
6uPUl6kfUo9TrxAYCBIEfYIHIZZwmFBLuEt4RfhGQ0MjQqND40YTQ3OYpo7m
Ps0ozU8iI1GaaEr0I6YQy4nNxGfEz7Q4WmFaXVpP2iTaUtprtE9p5+lwdCJ0
+nQkuv105XQ36IbplugZ6eXorenD6PPp6+l76KcZsAwiDIYMfgyZDGcY7jNM
MiIZBRn1GX0ZMxjPMnYxfmDCMIkymTIFM+UxXWLqY1pgZmBWZHZiTmAuZ77F
PMaCZBFhMWUJZSlgucoyxPKLlZtVl5XMmsPawPqM9QcbJ5sOG5ktl62RbZDt
FzsfuyF7CHshewv7Ww4UhwSHLUc8x0mOLo55TiZODU5fzlzOq5yvuRBcElx2
XMlcZ7h6uZa4ebiNuSO5y7jvc8/zsPDo8ATzFPPc5pnhZeTV4g3iLea9wzvL
x8ynyxfKd5yvk2+Bn4vfhD+Wv4q/j39VQFTAUSBdoFHgrSBeUFXQX7BYsENw
QYhXyFJor9AFodfCOGFV4UDhY8Ldwj9EREWcRQ6KtIhMi7KJmoomiV4QHRGj
EdMWixKrFnshjhFXFQ8RrxTvl0BIKEkESpRLPJVESCpLBklWSg7sQu9S2xW+
q3rXsBRBSlcqTuqC1Lg0i7SFdLp0i/RnGSEZN5lCmW6Z37JKsqGyZ2XfyDHI
mcmly7XJfZWXkPeVL5d/oUCjYKSQotCqsKgoqUhWPKn4UolRyVLpoFKH0rqy
ijJFuUF5RkVIxVulQmVYlUnVRjVf9aEaWk1PLUWtXW1FXVk9Rv2q+hcNKY0Q
jXqN6d2iu8m7z+6e1BTQJGlWaY5p8Wl5a53WGtPm1yZpV2tP6Ajq+OnU6HzU
FdcN1r2o+1lPVo+i16T3Q19df5/+XQOkgbFBrkGfIYOho+EJw1EjAaMAowtG
C8ZKxsnGd03QJuYmhSbDptymvqZ1pgtmKmb7zDrNCeb25ifMJywkLCgWbZYI
SzPLo5YjVsJW4VYt1sDa1Pqo9VsbUZsom5u2GFsb23LbKTs5u7123faM9l72
9fbLDnoOBQ5vHMUcYx07nGidPJzqnH44GzgXOY+5yLjsc3nsyuEa5NrqhnVz
cqtxW3I3dC9x/+Ch5JHlMbRHdE/Cnh5PDs9Qz1tetF4kr2veaG9n73rvNZI1
qZq05GPqU+Gz4Kvve8x3zk/Hr9hvhqxJLiJ/9Nf0L/KfDtAMOBowE6gdWBo4
H6QfdCJoMdgk+FTwjxDrkNqQjVDn0MYwqjDvsBvhDOEh4Z0RPBEJEQORkpFZ
kWNR6lElUQsUc0pNNBS9J7o1hgm+ZPfGisUeiB2P04orj/sZ7xR/LYE+ITyh
N1EiMSfxY5JR0rlkVLJvcsde/r1pe8f36e6r2g/t99nfkSKYkpnyIdU49Xwa
Pi0k7Um6bHpR+vcM54y2TO7M1MzJA8YHLmQRsyhZwwc1Dp7KRmUHZfflKOSU
5fzO9ct9lCebV5q3lu+b/+iQ3KHjhzYO+x/uK1AuOHkEcyT8yFChduH5Ivqi
pKLJo5ZHm4v5inOLv5d4lfSUKpaeOoY/Fnts7LjF8dYyobIjZWsnAk8MluuV
N1ZwVeRU/Kj0q3x2UudkwynuU3mnfp0OOv2yyriquVqkuvQM5kzcmamzTme7
z6meq6vhqMmrWa8Nrx07b3e+s06lrq6eq77gAuJC7IWZix4X+y8ZXGptkGqo
amRpzLsMLsdenr3ifWXoqvnVjmuq1xquC1+vaGJsym2GmhObF1oCW8ZaXVsH
bpjd6GjTaGu6KX2ztp2/vfwW862C2/jbmbc37iTdWbobeXf+XsC9yQ6vjjf3
Xe6/6LTt7Osy73r4wOjB/W7d7jsPNR+296j33Hik+qjlsfLj5l6l3qYnSk+a
+pT7mp+qPG3tV+tvG9g9cPuZ9rN7zw2eP3hh+uLxoNXgwJDj0Mthj+Gxl34v
p1+Fvlp8Hfd69U3qCHok9y3d29JRrtHqd+LvGseUx26NG4z3TthPvJn0nZx7
H/1+7UPmFM1U6Ufej3XT8tPtM0Yz/bPusx/mIudW57M+0X+q+Cz2+foXnS+9
Cy4LHxYpixtf87+xf6v9rvi9Y8lmaXQ5bHn1R+5P9p/nV1RXun85//q4Gr+G
XTu+Lr7e9tv898hG2MZGJIlC2roKIOEH4e8PwNdaAGhcAWDsBwDvvp2b7RQk
fPnYzGWdIEOELlIVxYbGY6iwslSuuAz8HQKGhkRsocPThzI8YlJirmAFbCHs
fZzKXEe453h1+Ar4BwTxQmrCriIhomFiHuJ6EtwSi5IPdpVJhUhrytDIvJNt
lEuVt1XgV/ikeEPpgLKtCpfKB9UGtQR1XQ28xvPdFZp+Wru0vmq36OzV1dMj
6L3Tv21Qb1hpVGi834Rkqm3GZrZo3mvRYFlpVWXdbjNph7Znd+BwpHNCOq05
r7oCN5w70YNmD2rPkueEV7/3XdI1nxrfMr9ccqJ/QIBDoF6QYrBECH8oexht
ODL8e8REZH/UTcrZ6MMxKbFZcU0JqERy0t29YJ/IfvUU01T3tNj0wxklmckH
FA9MZhUctMkWzqHOBXmIfPpDYoe1CqyOOBe6FbkddSl2KnEotT1mddy8zPiE
XrlWhVqlwkmpUxKnZavMqzPOjJ0zrblYO1dHXy98Qe6ixiWDBstG58teVwKv
Rl6Lv76/Kb35QEt2a96NgraSmxXtNbeu3+66M3x37N5QR+N9/062zoddpQ/i
u/0f7ulxfmT72LzX+IlJn8PTqP7TA6+eU7+QGdQfMh02fKn6Svg18fXKm+mR
l2/vjZ55lzEWMO44YTVp+d76g/WU2Ue1adbpsZncWcXZsbnz80mfTD5Tfa77
YvxlcuHMYsJXz2/W3y2Xgpc7fh781bJusLGxE385JAo5gxpDT2IWqJA4ZXwg
dQVhjChBG0/3gIGdMZHpBYs8azrbWw4lziyufh4OXhe+Qv52gRHBJaFl4VmR
J6JnxCjiWhJUEi8kT+0KllKS+i39QOawrLMcr9xH+QaFOEVNJUipSzlXxVqV
UXVIrUzdXYNbYwSeBR5a7FrD2sd03HVFdFf1BvWvGOQbko12G9MbT5m0m5aY
xZmTLXwsA60irMNsfGyt7TTsJRw4HYlOCKdl548uQ6733Rrcyz1y9yR5Bnm5
eBuQZHzYfCHfWb9Bcqd/U0BNYGlQZnBEiGuoTphoOA08E8YjR6O+R/PHeMWW
xd2Lf5kwmTiftLKXeh/PfrEUvlRM6ru0pvSCDEqm5wHHLJeDQdkZOZW5l/Ka
8psPXT98peDSkbrCc0Wnj5YXl5QUlOYcSz+eWBZxIqA8qCK18s4p8dPnq0XP
FJ19fm6llnieo06wXgKeByqXtBoMGi0vu14JvZp17cz1200DzaMt063f2pA3
Wdslb2nc1rmjcpf/HuLeREf3/abO2q7yB0e6DzxM6qE8inmc09vex/J0X//b
ZxzPtV84DPoPpQ6fe/n01fc3DCNSby1GI98dG7s5/mxidHLi/dwUGo5+2szA
HP287CelzyJfaL/8XJhaHP766NuN71VLKctOP0R/LP9sX0n6pbFKWDNYn9mJ
vzQ0h6hEeqLE0Vj0ImYGO0s1gVukxhOEaXSJbrRpdBfpBxg2mISZDVmCWQ+w
nWK/ztHF+ZDrAfdNnireBD49vl/8ZwXMBeYEs4VEhTqEPYVXRIpFZUUfiQWI
Y8VrJUwkPkpm7RLb1SXlKw2kK2V2y7yUjYVvN43yFvLTChmKPIqtSnZK88oH
VHhVWuBby7RaijqL+gUNXY1nu313f9ZM1sJqlWsrag/pJOny6LbqWeu90g/U
3zCoNrQxwhndN95romgya1pt5mHOZj5kUWJpb0Vr1WOdYaNh89220S7EXtT+
vUOV4x4ndqcXzgUuJi4brk1uoe5C7m89SvdY7Vn2LPYS9rrurev9mpTgI+Dz
Et5HAsnG/ioBaoGmQaTgsBBSqHYYXdhI+LmIsEilyLWo+5TcaJsY5pg3safi
/OJF4qcSTiYaJo4khSYzJT/fe3Pf7f2dKfdTb6TVpZdmZGRGHHDPMjwokY3O
fpFTluuWJ5S3mj926MnhGwWnj+wvdC9SP8pxdKV4qORq6bFjh44XlVWduFb+
oOJl5ezJ1dM0VXzVCmdMznqci6jZX5tzPr8utZ50QeUi8eLXS58aVi4TrvBc
lb9mcz256Xrzz1a1G5FtZTcvt7feunm7587SPeOOG532XUvdpT0Kj170Hurz
7jd9pvtCbyj0FXFkbqJvdun7ymb8t3+j2ywYZQCOpsEZahYAjtoAFHbCeeYg
nHfiAbChAcBBDSBE/AGC0Asg9fG/5wcEnzYYQA3oARvgBaJAFqjDubA1cAP+
IBrOLgvASdAAboOnYBx8hzNHLkgOMoa8oHioELoIPYSmEBiEGMICEY2ohPO8
DTivi0PeQP5GGaOOoibQCuhs9DuMOqYMswpnWI+oVKhqcZy4Qjw1PocaT32E
wEGopVGkaSdqEttoVWlv0pnQvaGPYaBjuMRowDjA5MA0wGzN/IzFi+Unaxmb
Jtso+z4OTo42Tk8uHFc7dxyPIs833qt8FH4l/jWBbsFSoUDh3SJEkTHRa2LZ
4j4SupIiu4i7VqU+S7+XGZRtkkuWl5MfVchWVFL8otSqXKSSqOqnZqEuq8G6
m6gprVWuI6l7SK9H/4shlRGzMbsJl6mQmaK5lUWU5XGrTuuvtoJ2zvaHHbqd
UM4GLlmuve4sHj576j3fe2NI9D4YnyXfD34j5NkA2kDzoJLgj6G7w4rDP0ea
RdVHE2KiYl/HGyW0Jkkl1+zj21+eypJWmIHPTDuwdDA4ey43Lz/scFMh/VGO
4k+ldce9TrCU91ceOmV8eqm64CzTueya5fMhdV8vHLlk2Eh/efHq1PXp5rnW
j22T7Yt3WO/p3/fs8u6279F+LPNE/KnyQPjzn8Oo17iRU+8Yx29/IE7vndP9
1Phl9avyd6Nl/I9DPx+tTP/6sPpq7fr6kd8+G7Jb+8dm/LGAABgAO+AHEkAB
aAIT4AC8QRhIBjmgDNSBG+AxeAsWIDTEAcluRT8RKoYuQ33QJwQtQgHhhshA
XEV8QPIivZBnkfMoZVQmahAtjk5Dj8CxL8cCbCB2kMqQqhUng6vHi+MvUitS
3yHYECZpEog4YgktP+1lOH99Qx/PwMLQwujE+IlpHzOe+TiLFMsj1gg2Vra7
7EEcTBx3OSO4hLhGuMt4XHjZeF/xVfL7CcgKAsEXQheEM0U8RBXhXG5WvFfi
GnyKFUhlSO+ViZH1ldORJ8j3KeQqmiuxKi0qv1LpVm1Wq1bP10jaHaeZo9Wq
/UNXQc9PP8+gxrDZ6KbxTZNbpj1m4xYISwkrJ+sDNi228/ZCDl6OlU6jLgKu
wW7NHtg9zp4nvLq8B0gdPnW+2X5BZDt/kwDXwPSguyE0oT5h7REckUlRb6P1
YuriaOMjEx4n8SfH7e3fr5RyNo0zvTgTfyA5az6blDORl3RItgBx5G3RleK4
UsVjX8uulMdWqp/8dbqmWv5M5dmPNaK1gecv17NeqLik2fDpctlVtWt9TaTm
1dbqNtt2cKvujsXdxY5TnT4P1B/yP0I9fvIk7immP/cZ4Xn1oNew5avQN7Vv
P47xTti8T5u6PcM6d+SzyMKTb8XL+Sumq/JrJ9ff/17ciT8K4AAdvPr5gSRQ
BvrABnjCsd8Hr/wqcB08BKPwuidAIpAOtAdKhsqhW9A4AgdHnYQoQfQjmZFk
5C0UFyoVNYt2RT/B6GNuYTWx96gsqN7iovG0+MvUTgQkoYUmiihH/EnbRVdG
H8vgymjKZMZsy2LGqsImzq7E4cWZyBXD7cPjwGvFZ8lvKWAhaClkJ+wlEi16
SKxe/KHEzC4aKRVpf5kTskPyHAp+io1Kqyo2qk/Uc3a7aqG1j+is6ZnrZ8AR
bDFqN75t0me6am5u0WwlbX3RVtqu2UHfccg5zBXvdtHDyZPem9rHy8+d/D5A
IzAvaCrELrQ33DLiWZQ7ZTomOY4nfjTxQfLdfZUpjqm/0qsynbJ4Dy7k3MrL
P+RfYFzIXvS42L9k+VhGGf2J6grlyien/Kug6oqzqucGa2PrOOsfXkxpML4s
c9XoekpzdWtBm2s7663hO+X3XO9jO889UOy+2WP4aLg3oU+mHzmw8Hx6cGC4
8JXo68o3v98ajua+ezxOO+E4efr9zJTcx5Dp0zMPZ2fn0Z+4Pst+MVhwXiR9
9ftm813g+9LSoWWu5fofaj9O/Fj56fyzeYVlhbLSvLL6S+dX5q+eVeKq/eqx
1f41qjWdtYS1K2sz6/zrrutF64/W13/L/fb7fez349+/N+Q2yBvHN3o34x/t
ryC/dXxABD0A0KMbG99EAMAWAbBeuLGxWr2xsX4GTjZGALgbuv2/z9ZZQwdA
xcImetz6K/U//3/5f2/j13o=
      "], "RGB", "XYZ"], Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{519, 444},
  PlotRange->{{0, 519}, {0, 444}}]], "Input",ExpressionUUID->"c40d2f21-2aa1-\
48cc-bd87-a65a1f301c3b"],

Cell[BoxData[""], "Input",
 CellTags->"NoLabel",ExpressionUUID->"4acfb21f-f432-4144-b6d2-d23b5ffbdfc7"],

Cell["There is something odd there...", "Text",ExpressionUUID->"ae862638-60ff-428b-b55e-77ae3e256797"],

Cell[BoxData[
 FrameBox[
  TagBox[GridBox[{
     {
      StyleBox["\<\"ENTER YOUR CODE HERE\"\>",
       StripOnInput->False,
       FontFamily->"Source Sans Pro",
       FontSize->18,
       FontWeight->Plain,
       FontColor->GrayLevel[1]]}
    },
    AutoDelete->False,
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
   "Grid"],
  Background->RGBColor[0.9961, 0.3098, 0.21569],
  FrameMargins->{{13, 13}, {2, 8}},
  FrameStyle->None,
  ImageMargins->{{0, 0}, {-2, 0}},
  StripOnInput->False]], "WCIntroDivider"],

Cell[BoxData[""], "WCIntroDividerLine"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DigitCountPi", "[", 
   RowBox[{"n_Integer", "?", "Positive"}], "]"}], ":=", 
  RowBox[{"BinCounts", "[", 
   RowBox[{
    RowBox[{"First", "[", 
     RowBox[{"RealDigits", "[", 
      RowBox[{"N", "[", 
       RowBox[{"Pi", ",", "n"}], "]"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "10", ",", "1"}], "}"}]}], "]"}]}]], "Input",
 CellTags->"NoLabel",ExpressionUUID->"4f3af2b2-6291-4158-b6e0-c2a9f2ad5983"]
}, Open  ]],

Cell[BoxData[
 TemplateBox[{
  DynamicModuleBox[{
    WolframChallenges`Notebooks`Authoring`Private`$inSubmit$$ = False}, 
    ButtonBox[
     DynamicBox[
      ToBoxes[
       If[
        TrueQ[WolframChallenges`Notebooks`Authoring`Private`$inSubmit$$], 
        Framed[
         Panel[
          ProgressIndicator[Appearance -> "Percolate", ImageSize -> {60, 20}],
           Background -> White, ImageSize -> {100, 20}, FrameMargins -> 0, 
          Alignment -> Center, Appearance -> "Frameless"], Background -> 
         GrayLevel[1], FrameStyle -> RGBColor[0.9961, 0.3098, 0.21569], 
         RoundingRadius -> 3, Alignment -> Center], 
        Mouseover[
         Framed[
          Panel[
           Style["Submit", "ButtonLabel", ShowStringCharacters -> False], 
           Background -> RGBColor[0.9961, 0.3098, 0.21569], 
           ImageSize -> {100, 20}, FrameMargins -> 0, Alignment -> Center, 
           Appearance -> "Frameless"], Background -> 
          RGBColor[0.9961, 0.3098, 0.21569], FrameStyle -> 
          RGBColor[0.9961, 0.3098, 0.21569], RoundingRadius -> 3, Alignment -> 
          Center], 
         Framed[
          Panel[
           Style[
           "Submit", "ButtonLabelActive", ShowStringCharacters -> False], 
           Background -> GrayLevel[1], ImageSize -> {100, 20}, FrameMargins -> 
           0, Alignment -> Center, Appearance -> "Frameless"], Background -> 
          GrayLevel[1], FrameStyle -> RGBColor[0.9961, 0.3098, 0.21569], 
          RoundingRadius -> 3, Alignment -> Center]]], StandardForm], 
      ImageSizeCache -> {112., {13., 19.}}], Appearance -> None, 
     ButtonFunction :> ((
      WolframChallenges`Notebooks`Authoring`Private`$inSubmit$$ = True; (Off[
         MessageName[$CharacterEncoding, "utf8"]]; ((If[
          Not[
           TrueQ[
            WolframChallenges`$NotebookInitializedQ[
             Hash[{$SessionID, 
               Last[
                EvaluationNotebook[]]}]]]], 
          CloudGet[
           FileNameJoin[{
             CloudObject[
             "https://www.wolframcloud.com/objects/wolframchallenges/public/\
symbols"], "InitializeNotebook"}]][]]; If[
          Not[
           ValueQ[
           WolframChallenges`Notebooks`Dialogs`RunWithSubmissionPolicy]], 
          WolframChallenges`Notebooks`Dialogs`RunWithSubmissionPolicy = 
          CloudGet[
            FileNameJoin[{
              CloudObject[
              "https://www.wolframcloud.com/objects/wolframchallenges/public/\
symbols"], "RunWithSubmissionPolicy"}]]]; 
        WolframChallenges`Notebooks`Dialogs`RunWithSubmissionPolicy[If[
            Or[$VersionNumber >= 11.1, 
             ChoiceDialog[
              StringJoin["Wolfram Challenges is designed for version ", 
               ToString[11.1], 
               " or later of the Wolfram System, and may not function \
properly with the older ", 
               "kernel you are using. Contact Wolfram Research \
(www.wolfram.com) for upgrade information."]]], 
            If[
             Not[
              StringQ[
               If[
                Not[$CloudConnected], 
                CloudConnect[], $WolframID]]], 
             MessageDialog[
             "Users must authenticate with the cloud in order to submit \
solutions."], WolframChallenges`$SubmissionTesting = False; Quiet[
               Quiet[If[
                  TrueQ[WolframChallenges`Common`$ActiveClearing], 
                  Quiet[
                   Unset[
                    Once["public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/HandleResponse"]], "KernelSession"]]]]; Catch[
                  
                  Module[{CodeEquivalence`Utilities`Private`result$}, 
                   Check[CodeEquivalence`Utilities`Private`result$ = 
                    CodeEquivalence`Utilities`Private`once[
                    "public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/HandleResponse"]], "KernelSession"], Quiet[
                    Unset[
                    CodeEquivalence`Utilities`Private`once[
                    "public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/HandleResponse"]], "KernelSession"]]]; 
                    Throw[CodeEquivalence`Utilities`Private`result$, 
                    CodeEquivalence`Utilities`OnceUnlessFailed]]; If[
                    FailureQ[CodeEquivalence`Utilities`Private`result$], Quiet[
                    Unset[
                    CodeEquivalence`Utilities`Private`once[
                    "public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/HandleResponse"]], "KernelSession"]]]; (Message[
                    "Evaluating `1` resulted in the failure `2`.", 
                    Short[
                    HoldForm["public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/HandleResponse"]]]], 
                    Short[
                    HoldForm[#]]]& )[
                    CodeEquivalence`Utilities`Private`result$]]; 
                   CodeEquivalence`Utilities`Private`result$], 
                  CodeEquivalence`Utilities`OnceUnlessFailed], 
                MessageName[CloudObject, "invuri"]], 
               MessageName[$CharacterEncoding, "utf8"]][
               Quiet[
                Quiet[If[
                   TrueQ[WolframChallenges`Common`$ActiveClearing], 
                   Quiet[
                    Unset[
                    Once["public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/CheckAnswer"]], "KernelSession"]]]]; Catch[
                   
                   Module[{CodeEquivalence`Utilities`Private`result$}, 
                    Check[CodeEquivalence`Utilities`Private`result$ = 
                    CodeEquivalence`Utilities`Private`once[
                    "public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/CheckAnswer"]], "KernelSession"], Quiet[
                    Unset[
                    CodeEquivalence`Utilities`Private`once[
                    "public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/CheckAnswer"]], "KernelSession"]]]; 
                    Throw[CodeEquivalence`Utilities`Private`result$, 
                    CodeEquivalence`Utilities`OnceUnlessFailed]]; If[
                    FailureQ[CodeEquivalence`Utilities`Private`result$], Quiet[
                    Unset[
                    CodeEquivalence`Utilities`Private`once[
                    "public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/CheckAnswer"]], "KernelSession"]]]; (Message[
                    "Evaluating `1` resulted in the failure `2`.", 
                    Short[
                    HoldForm["public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/CheckAnswer"]]]], 
                    Short[
                    HoldForm[#]]]& )[
                    CodeEquivalence`Utilities`Private`result$]]; 
                    CodeEquivalence`Utilities`Private`result$], 
                   CodeEquivalence`Utilities`OnceUnlessFailed], 
                 MessageName[CloudObject, "invuri"]], 
                MessageName[$CharacterEncoding, "utf8"]][
                CloudObject[
                "https://www.wolframcloud.com/objects/wolframchallenges/\
public/api/check"], {"DigitCountPi"}, "public/pub/p-7ee4b656200ddb21"]]]]; 
          Null])& )[]); 
      WolframChallenges`Notebooks`Authoring`Private`$inSubmit$$ = False; 
      Null)& )[], Evaluator -> Automatic, Method -> "Queued"], 
    DynamicModuleValues :> {}, 
    Initialization :> {
     WolframChallenges`Notebooks`Authoring`Private`$inSubmit$$ = False}],
   TemplateBox[{10}, "Spacer1"],DynamicBox[
    ToBoxes[
     Refresh[Off[
        MessageName[$CharacterEncoding, "utf8"]]; If[
        Not[
         TrueQ[$CloudConnected]], 
        Column[{
          Row[{
            Text[
             Style[
             "Note: ", "SigninText", FontWeight -> "DemiBold", Background -> 
              None]], 
            Text[
             Button[
              
              PaneSelector[{
               False -> "Sign into the Wolfram Cloud", True -> 
                "Sign into the Wolfram Cloud"}, 
               Dynamic[
                CurrentValue["MouseOver"], 
                ImageSizeCache -> {48., {1., 12.}}], 
               BaseStyle -> {"SigninText", 
                 RGBColor["#36b1bf"]}, FrameMargins -> 0, ImageSize -> 
               Automatic], 
              CloudConnect[], Appearance -> None, Evaluator -> Automatic, 
              Method -> "Queued"]], 
            Text[
             Style[
             " to save your work on ", "SigninText", Background -> None]]}], 
          Text[
           Style[
           "Challenges and keep track of progress.", "SigninText", Background -> 
            None]]}, Alignment -> Left, Spacings -> 0], 
        Invisible[""]], UpdateInterval -> 1], StandardForm]]},
  "RowDefault"]], "SubmitRow",ExpressionUUID->"e95e84fc-f934-450c-bae2-\
2107cc70e6af"]
},
WindowSize->{808, 851},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    TagBox[
     GridBox[{{
        ButtonBox[
         TagBox[
          GridBox[{{
             GraphicsBox[
              TagBox[
               RasterBox[CompressedData["
1:eJzVmguUlVUVx4eXTDAoMSKGyEMFEc0oKRCmDBIMTSpEKkFGRh6ZNBCgaJGD
+QDKB1SKBoQouVKyJDGNkcBkWUG+SgXJ1JKsMAvIMJ+7/evsb90z557vfneu
F1zutf4z3+Ocs/c+j/36bq+66aOntKyoqJhVqX9GT5wzdObMiRef0VFvzqyf
dd7U+smTRtbPnjx18sxBda304WBFjaJ1RflJRFopOpZhnPcyVjlk2lek8p2h
+Ktiod13U6xQ/EIxFx0ifToqvmptbqKPPZ+v+Jti7P7WI41Ulh6KIXbdRfFf
cVRruv5ZcsS7oZExhnr9oOetb63dv6o4zNqeCM/9rafxPkXxsmKV3Y/2ZJ6J
jIovKtYo7lAMLDDWR6zNT60P+n7FG2+MtVup+I9ixP7S05PxKZPldruvUbzm
ybinlLWwedrjjfO6t4dus2fbyq1PRI4DFX29+7eM96N21sazhuLO66q3swba
d7jiFhtrkGKc8XjEeMK7pbU9RnFQOXT0+LO/nlHc4z3zzya0U8zW7APefw94
7fDer1U8W07eOtZ644NdaWPPBit+otiqWK3oVS5+Ef49jceTxnOwPW+peMVk
21gmXp2Cue1jz9s0c5wDFMcpRtnen6Q4U/FRxSHNHCuZ8+6BbJ2bM07K2IcH
Yz6t2Kt4U7E4o++hiumKDbYOu8SdwUbDJsVz4s7jHxRLFCcpWhQYc6Hx3mt9
fOpZoo7DFP3tuoXiT5JPbyhqUvofJS52QKZ7FecqjijAr71ihOLb4s7qE4qz
xWxS0Haw8Q7p+WSe9P/xipFF6nq4rcN2RaU9O9fmNKHdyBPp21oxT5xfvlHs
TJv+08TZ7V8r/mh4XHG34grFyYo24vZ9nc3xrxTHRfiMNxkTQrZae9fWZP+3
onsR+i7zxpnhPT9S8Vlx569TpF9Xk+9hxQfE2ZIxige98fDZN0fWJiHWlv1K
rPYexZU2d+dE+HUyWYhzjvSef9kbb3kR+m7z2nNWK8XFdthF9ma/SB984HM2
V8zv8aa7T0mcOKCAvgmxdpx7zhK++F+KSyJ8+5pMd5qMyLrdG2d7EfpuDXi/
5F0Ty3YK2nczXa60+4mS8xEJESMRi4y0uXkmeL8mRe97FAeJs+v494sia/xq
iqxQZhymba5P4Q3dGrRlLR9SLLH7i1P6sS8/JG4eLlJ8y3v3PXFn9q1IP+gx
RWfFh8Xt7VMDGVYWkPf6IvTtIe6sh8Qadg3aXiNu3yLvlBSeLyg6KLbYPT5o
oF0vEmejmLd/FJAbG8dexWa/KJ6f1ev3mWwhoUPPFB05Jy29+0+Jyz0hbPEK
xg36cEaZb87QB6XpvvJphuJ07x5bij063/Tk7PUTZ68L0Q3GlxxqWSALfv77
4s65mOyjvPfYzhbe/ScUmxW9gzmosuv2kTn6seJqcfWMh1JkJM+pEudzfKoV
53Mb7f79kssF0oj9Tq6MnyCuPSqQp739rwp0O9p0O9l7douNyXkf4Ok7S5yd
WBOMjT99xeb1rAIy4oOxZ2F8wFyd5t0j0wMZ+kIPGn982pJAJvYJZ2K25OKO
ExT/tL4rvbaPemOiXx9p6ofXBWNfqlht1w+nyMa+xUbNi7zjHHTz7rsXqS9E
bYBcG5/V1pPpXq/NCnFrstN7tsVr+8tgzL3B/c2Bvuj4OcWxBeSiXoWdejHl
Pf2pW+GrDpHi9V0gbu9hB4d7Mt2UocMmr21DBo8JXlvyftYOHzErpT3zh81u
THkPUZc5VfExRTspXt9tJgex6TxPrvEZ/S7z2lL7DPP3hNjrbby21Mz+Yte3
RtqzXsQHFxQhO/WfswIbUgwdrJijuM2TC7+2OaU9cWKT2qi4M/tk0O4+RZeg
HfswsRu/jYy92OTZXaTs2F3iFHKNJUX2wX9T+90cyEYs9vOgLfFiH69NB+8a
H/ElcfaI+uMECXJxcXHF3XYd5p/YB+rJlxUh88vBPetLTHFO5F1InxSXP24N
ZOtsMo8wHfDxVb6u4vYAc9I/6Jf41HERfdfa9VPSlPAF5DWJjWJuN0bkxX8e
aJgqufoUdrCPIW1vQuQQp0T0TXwj+XMX73l/cfYbnZK55Cxhf4gf1ntjXxrZ
z5vs+jdeO74rYHeoJbJHLxHnn2Ox6WvW9+vi7NVS7x3tyTk4j5eLswchkWN9
njEC2Xzfh/3jjMyQXJ14b0Sex4P7BcGY1Ed32PUqr129PWMedyjGils/fM13
IjJnEfX3rqbbY8E78iLyjh8Gsl2RoQs+YV0G3/HBmOjwhumRfAPg3LKPD5Om
sRR2iDPzuyzlUoi1qBfn2xrExehPmxzUK+cFso3LGA9d0+pBED6qXUVA4uwy
Z6WvtZtrzy/0+hL/s5++21wlA8LX/7+mLq7OTI2L+J/zMyyQi/MUq7VBnLEa
a1cr+fEIOQbxJ/WRg4NxGyRns4gpqu3atzH4X+Ig/MZgGwvf/WlxdvMbiuXi
6uWPmPx+jSwhfCf2c7Xd44vIG4iLD/BkqjZZiWFfCMbAPk4KdCCGvUHc2l0n
zod+wdqvDdr2EvtuJ1bvEBcP+zk7372oX00x3dGPWJBzRx5L7bkqGJf9kJzZ
060vueJsG/N+a/cDZAz6JjWScSb7daYLeUDviiJIXJ6d0IjgHfN9o3d/fmRt
smiB9eX7AXWAu8TlVA2K88TFiNRG3jSwT8ilmuSD4urHCTWJQVL0amvzTZ5P
DoBPIvbwfcGKoA/tyAmPtfssuxcj/ERf6w//tJoOtMja/Uws9/dk8XM5bFGV
6dDPdGLsSq89+8g/v9QJwjhhY2SeqJ2yZ7Cfid9tLt3njZcWl603HnyDwa5U
B3KsD9rfL7laB8S6tA76/ChDriY1FOuDDOz55XZPvFKKzmOtP/YtrFUSc2Gb
8fusyfCIHEulMN0Z6UPMlVaDgk4SZ2vDecJOYUOvtXtsUSymKkTEJ0ntCN2e
sOfojr+nNkmMekHAm31JXDOkwNicmQGhvtYfffZE+mAPa+yavdMh6HeEOH+b
xPz45Q3N1HmhNx61iTq7HmkyXRjwbCe5fcw3xlWRMZn3MTFdvXGoHfKtBxtw
uzj/zth+PntHSj/y/N9LrgZGjYqcspg9zjoc7Y2HzbnKdB0X4bfa6zvHZFxs
Mi8zHQ4tpGvGPMwP5MvbI+Js4lybV+rgve05fnqyOP+OHaSGwHcPcgbiZHKL
GuuP3PhuYgZ8VN8InxMDWeaXqlcwLnPcQ9x+vTrgMadAP2IXbAh2kd9V4Zvx
m3nfN609OfNpNh8v2XyQh0W/A9uc+rTIZETWqlifDD2pn2fVv8mnyRGIJyfE
dBGXU0yzNuQm2Fdyhwfs2RbJxX7kysTaQ0I9xcXL8FhnPGM1T5+wd3nfUQvo
21ryv5uFxLfRj3v37L3qAmOSz7LGrCO5a624eHNQRr9qaVrLI3b+TIZs7I/o
XirAh7g7Zqsh1gTfOyx4js5l+1mmuPMc1i2HG+8wJ0gImU8okR8xI/l7Ele+
bjqNtvfE5WFOU1dGfc8OxsbOd7Z3o0wWXzZkLXofF+CLT+Us5v1eVZrmFNC6
2Bgl8g1rjVsibVqZbJWxMcokB3Up4uVrJT+/3lVGPruCseGFLSZvKtm3NoM/
dQa+R6bVQxLKq4mUwKsygwcykD8eUw7dUmTgzBQTK5GzYrubvcfE+Qby3MuL
4IMseflDOUlc/SwtryCm58wlNV58Lt9+qeF3LTAm548aLDlasoeJVfDROyVO
yDB9X+rqyUcsg8+/y2QiduS7QJLj4GvxVcRkz5p82HHi62n2HhtA3LVBcueD
+iB1GGrpyW+/iPFqjUej8YR36u/X3kkSl9MONN0bxH0DbZScH8OPEufnxVXv
VhIX31OLTPJi4kq+LX5TXB63Qgr8/v3dQOLq7Jxbv8bP9yZ+68/3AfIgcia/
hkstY4qUEPO/UyQuVyfuT76HkteutvOclu9QWyE3SuzcbjvHbztW2tckLo9g
vxIbfE2C3zFl9CUv5BtN8pvApftS1nKRuPpuybZHXP6X+dvWUuh/YTQHOQ==

                "], {{0, 58}, {60, 0}}, {0, 255}, ColorFunction -> RGBColor], 
               
               BoxForm`ImageTag[
               "Byte", ColorSpace -> "RGB", Interleaving -> True], Selectable -> 
               False], BoxID -> 
              "{\"type\":\"Image\",\"message\":\"SizeLimitReached\",\"\
imageData\":{\"imageSource\":\"data:image/png;base64,\
iVBORw0KGgoAAAANSUhEUgAAAB4AAAAdCAYAAAC9pNwMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAA\
AOxAAADsQBlSsOGwAABL5JREFUSIm1l2mIllUUx393Rs1sUUizKNFSTPODhbbYouRMtmglWGhZQYlt\
QmL0oUUliEpbRLRMKwk0W6XUD1k2ViSCGmkoWplLWDqU0zK5TGYzvz7c8+LTOONMUAdenvvcc885/\
3vP/57zvNAKUTur96vt1DvUfgVdT3Wc2l69Rz2jNT7btBBwDPATMBw4D9gDTAKmAZtjWV9gIlAGDAW\
GqM8AA1NKL7UGRDHgyfE8oD6r3quuU0cfw+bKWDNJnarWxXyn1gYdoFarSV2kblev+RegL1W3qkvi/\
Xu1ovG6po76WuA04GlgQ0ppbMFpW+\
A64AogFXxsBN5OKdWklFYDvdX71OnAmcAYYGUxSCo4HUnOUy3wEVAPTCjlSZ0A9Azd8TFuC+\
wCqoFBwCnA1JTSPvUmYFEAK3Gl91F5j+P5Vj1dnaz2jPkO6jz1GnWG+pu6XH3DI/\
KnulQdor6qnhO23dTH1B7qBvX7pnKzqeCkWm0TeZ6rDla3hP67uDaT432W2hDjWnWUOl/\
tqparO9XDod/eVOCr1Tp1l1oZc+PVa9WvCrubpP6uzlSnqJXqrwX9frVCfSV8XKRuUw+\
pt5TilakD1VXAGqAP8EJKqUptDwyM3PWJ9T8Ah4GTgMsAgduCFyU5AZgOrFIvTimtBeYC/\
YFl6gq1AnV0IF2v7lG3BtLh6sjYXUkeUL+J8V+x+3nmK9dYKtU54WuDWqN+\
FrqJZcBq4CBwPnA68GEgHwDsj90BfAJ0BXrHezlwN/\
B82DeWYcCfMX6HzPjLgTrgfcwkukBdEnk7MVBOU28NhIfUEQWSlOSwuttMqLWNdO+\
oT4av9upz6jIz88vLgO3kGvs4cGfslMifMX4DGAy8BNTEXD1wb8wtABYDTwANoW/\
gSJ3oE2tnAf2AHUReS2xUHRwoH1WHxm57ma/Yk+rNTeSzJFWh36w+pc4OX/\
1DfzCeNWXkzlIfbPwU2BsoPwc6A/\
OBXuQyuiXGM4CFsX5b5A2gArgIWA98XDixfcBScsVrAKakQNQLOBc4BLxFJtBv5GtwF5lAdwMryGXy\
BOBAgJsKjCMTrCGOchDwOvmKfgd8GxusBXallDahlgWx5qjvxlGMC0Bjg1QfNnO0DeZ2OL4w94t6uf\
pi+BgR85+qsyNWOaEs1l3V683lMpnrc4W6ppngX5tL4wvqXvUq9TWjD8d7UaooidoxAqyL50J1ceja\
mT8GbjYXkB+bCP5IrBsctt3C9mX1A3Oj+DzAdaZA9xKAMqAT+cIPBQaklNaH7kbganIhqQa6RL5/\
AtqFbjcwM6VUp/YNMn5BLia1KaX6UqxiP+\
4A7AROLWAZTr6bD6aUVqptgEuAiwNgAv4gfwisTCn9rl4YZHyIfzb/\
GqBHSukAjSWIUm0mTZV6Soz3qd2PMjjavqu5Xzeop5krVb25To9qyTipbeM3JICoPtyKwLfH2p/\
NTeI4o6+3ZFtycEYwtCjL1FOPYdMxyFSUX5s7qWaRxNFMAk4mf2d9SSbQWeSKNZ9cMG4jV6y9wHLgb\
DI36oA5KaWFrdptSxK5e9PcY1er76k9/hPnzQTsry5Qd5g/ebqrXcx/bTaai9Cg/\
yNwpXqD2q4JXbk6TB3fWn9/A9izhAbbZ9AzAAAAAElFTkSuQmCC\",\"boundingBox\":{\"\
width\":30,\"height\":29,\"baseline\":19}},\"plotRange\":[0,1,0,1]}", 
              DefaultBaseStyle -> "ImageGraphics", ImageSize -> 
              Magnification[0.5], ImageSizeRaw -> {60, 58}, 
              PlotRange -> {{0, 60}, {0, 58}}], 
             StyleBox[
             "\"WOLFRAM CHALLENGES\"", ShowStringCharacters -> False, 
              FontFamily -> "Source Sans Pro", FontSize -> 16, FontWeight -> 
              "Normal", FontColor -> GrayLevel[1]]}}, AutoDelete -> False, 
           GridBoxAlignment -> {
            "Columns" -> {Left, Left}, "Rows" -> {Center, Center}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
         Appearance -> None, ButtonFunction :> 
         SystemOpen["http://challenges.wolfram.com/"], Evaluator -> Automatic,
          Method -> "Preemptive"]}}, AutoDelete -> False, 
      GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {{None}}}, 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]], 
   "Text", ShowCellBracket -> False, CellMargins -> 0, GeneratedCell -> True, 
   CellAutoOverwrite -> True, CellFrameMargins -> {{60, 0}, {4, 6}}, 
   CellFrameColor -> RGBColor[0.9961, 0.3098, 0.21569], ShowStringCharacters -> 
   False, Background -> RGBColor[0.9961, 0.3098, 0.21569]], 
  Cell["", "Text", CellMargins -> 0, ShowCellBracket -> False, 
   CellElementSpacings -> {"CellMinHeight" -> 5}, CellFrameMargins -> 3, 
   FontSize -> 1, CellFrame -> 0, Background -> 
   RGBColor[0.9686274509803922, 0.9137254901960784, 0.403921568627451]]},
TaggingRules->{
 "WolframChallengesInternal" -> 
  Association[
   "PacletVersion" -> "2.17.205", "FrameworkVersion" -> "public-2.17.205", 
    "PacletBuildDate" -> 
    DateObject[{2018, 4, 12, 2, 0, 29.8383958`9.227350380539981}, "Instant", 
      "Gregorian", 0.], "NotebookBuildDate" -> 
    DateObject[{2018, 4, 12, 3, 25, 0.603506`6.5332565813297565}, "Instant", 
      "Gregorian", 0.], "Hash" -> "7ee4b656200ddb21", "Key" -> 
    "public/pub/p-7ee4b656200ddb21", "CheckerAPI" -> 
    CloudObject[
     "https://www.wolframcloud.com/objects/wolframchallenges/public/api/\
check"], "SearchNames" -> {"DigitCountPi"}, "Status" -> "Published", "Source" -> 
    CloudObject[
     "https://www.wolframcloud.com/objects/wolframchallenges/public/pub/p-\
7ee4b656200ddb21"], "ReviewNotebook" -> False]},
ShowAutoSpellCheck->False,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData["Title"], ShowCellBracket -> False, ShowGroupOpener -> False, 
    CellMargins -> {{65.14453125, 30}, {0., 30.}}, 
    CellFrameMargins -> {{66, Inherited}, {Inherited, 20}}, FontFamily -> 
    "Source Sans Pro Light", FontSize -> 50, FontColor -> 
    RGBColor[0.1843137254901961, 0.6509803921568628, 0.6941176470588235]], 
   Cell[
    StyleData["Section"], CellFrame -> {{0, 0}, {0, 1}}, ShowCellBracket -> 
    False, ShowGroupOpener -> False, 
    CellMargins -> {{66, 30}, {Inherited, 35}}, Deployed -> True, 
    CellFrameMargins -> {{0, Inherited}, {Inherited, 10}}, CellFrameColor -> 
    GrayLevel[0.7137], FontFamily -> "Source Sans Pro", FontSize -> 17, 
    FontWeight -> "DemiBold", FontColor -> Hue[0.51, 0.817, 0.72]], 
   Cell[
    StyleData["SectionNoLine", StyleDefinitions -> StyleData["Section"]], 
    CellFrame -> {{0, 0}, {0, 0}}, CellMargins -> {{49, 30}, {4, 0}}], 
   Cell[
    StyleData["SectionOnlyLine", StyleDefinitions -> StyleData["Section"]], 
    CellMargins -> {{66, 30}, {4, 35}}, 
    CellElementSpacings -> {"CellMinHeight" -> 1}, CellFrameMargins -> 0, 
    FontSize -> 0.1], 
   Cell[
    StyleData["Subsection", StyleDefinitions -> StyleData["Section"]], 
    ShowCellBracket -> True, ShowGroupOpener -> True, WholeCellGroupOpener -> 
    True], 
   Cell[
    StyleData["Text"], ShowCellBracket -> True, 
    CellMargins -> {{66, 30}, {Inherited, Inherited}}, FontFamily -> 
    "Source Sans Pro", FontSize -> 16, FontWeight -> "Regular", FontSlant -> 
    "Plain", PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
    FontColor -> 
    RGBColor[0.3254901960784314, 0.3254901960784314, 0.3254901960784314]], 
   Cell[
    StyleData["Item"], CellDingbat -> 
    StyleBox["\[FilledSmallSquare]", Alignment -> Baseline, 
      RGBColor[0.21176470588235294`, 0.6941176470588235, 0.7490196078431373]],
     CellMargins -> {{81, 30}, {Inherited, Inherited}}, FontFamily -> 
    "Source Sans Pro", FontSize -> 16, FontWeight -> "Regular", FontSlant -> 
    "Plain", PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
    FontColor -> 
    RGBColor[0.3254901960784314, 0.3254901960784314, 0.3254901960784314]], 
   Cell[
    StyleData["Description"], ShowCellBracket -> False, 
    CellMargins -> {{71, 30}, {0, 10}}, 
    AutoStyleOptions -> {
     "LocalVariableStyle" -> {FontColor -> RGBColor[0.263, 0.537, 0.345]}}, 
    LineSpacing -> {1.2, 0}, FontFamily -> "Source Sans Pro", FontSize -> 20, 
    FontSlant -> "Plain", 
    PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, FontColor -> 
    GrayLevel[0.3]], 
   Cell[
    StyleData["WCIntroDivider"], Editable -> False, Selectable -> False, 
    Deletable -> False, ShowCellBracket -> False, 
    CellMargins -> {{66, 30}, {-2, 35}}, ShowStringCharacters -> False], 
   Cell[
    StyleData["WCIntroDividerLine", StyleDefinitions -> StyleData["Text"]], 
    Editable -> False, Selectable -> False, Deletable -> False, 
    CellFrame -> {{0, 0}, {0, 8}}, ShowCellBracket -> False, 
    CellMargins -> {{66, 30}, {15, 0}}, 
    CellElementSpacings -> {"CellMinHeight" -> 1}, 
    CellFrameMargins -> {{0, 0}, {-1, 0}}, CellFrameColor -> 
    RGBColor[0.9961, 0.3098, 0.21569], FontSize -> 1], 
   Cell[
    StyleData["SubmitRow"], Editable -> False, Selectable -> False, Deletable -> 
    False, CellFrame -> {{0, 0}, {0, 2}}, ShowCellBracket -> False, 
    CellMargins -> {{66, 30}, {15, 30}}, 
    CellGroupingRules -> {"SectionGrouping", -5}, 
    CellFrameMargins -> {{Inherited, Inherited}, {20, 20}}, CellFrameColor -> 
    RGBColor[0.996078431372549, 0.3058823529411765, 0.21568627450980393`]], 
   Cell[
    StyleData["StandardForm"], FontSize -> 16], 
   Cell[
    StyleData["CodeFont"], FontSize -> 
    FEPrivate`If[False, 0.907029 Inherited, Inherited]], 
   Cell[
    StyleData["RefLink"], TemplateBoxOptions -> {DisplayFunction :> (TagBox[
        ButtonBox[#, ButtonData -> #2, BaseStyle -> Dynamic[
           If[
            CurrentValue["MouseOver"], {
            "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
            "Link"}]]], 
        MouseAppearanceTag["LinkHand"]]& )}, 
    ButtonBoxOptions -> {BaseStyle -> "Link"}], 
   Cell[
    StyleData["InlineCode", StyleDefinitions -> StyleData["StandardForm"]]], 
   Cell[
    StyleData["SmallText", StyleDefinitions -> StyleData["Text"]], FontSize -> 
    0.975 Inherited, FontColor -> GrayLevel[0.25]], 
   Cell[
    StyleData["Hyperlink"], FontColor -> 
    RGBColor[0.21176470588235294`, 0.7058823529411765, 0.7490196078431373]], 
   Cell[
    StyleData["HyperlinkActive"], FontColor -> 
    RGBColor[0.996078431372549, 0.3058823529411765, 0.21568627450980393`]], 
   Cell[
    StyleData["SubmitButton"], ShowCellBracket -> False, 
    CellMargins -> {{66, Inherited}, {25, Inherited}}, ShowCellLabel -> False,
     TextAlignment -> Center, ShowStringCharacters -> False], 
   Cell[
    StyleData["SigninText", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontSize -> 12, FontColor -> 
    GrayLevel[0.25]], 
   Cell[
    StyleData["ButtonLabel", StyleDefinitions -> StyleData["Text"]], 
    TextAlignment -> Center, ShowStringCharacters -> False, FontFamily -> 
    "Source Sans Pro", FontSize -> 18, FontWeight -> "DemiBold", FontColor -> 
    GrayLevel[1]], 
   Cell[
    StyleData[
    "ButtonLabelActive", StyleDefinitions -> StyleData["ButtonLabel"]], 
    TextAlignment -> Center, ShowStringCharacters -> False, FontColor -> 
    RGBColor[0.996078431372549, 0.3058823529411765, 0.21568627450980393`]], 
   Cell[
    StyleData["Notebook"], ShowAutoSpellCheck -> False]}, Visible -> False, 
  FrontEndVersion -> 
  "11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, 2018)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "NoLabel"->{
  Cell[48905, 1007, 103, 1, 34, "Input",ExpressionUUID->"4acfb21f-f432-4144-b6d2-d23b5ffbdfc7",
   CellTags->"NoLabel"],
  Cell[49766, 1035, 462, 12, 61, "Input",ExpressionUUID->"4f3af2b2-6291-4158-b6e0-c2a9f2ad5983",
   CellTags->"NoLabel"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"NoLabel", 75159, 1547}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 39, 0, 94, "Title",ExpressionUUID->"a433e31d-b14b-4b0c-b1b6-94dbac9b02ca"],
Cell[622, 24, 633, 20, 68, "WCIntroDivider",ExpressionUUID->"b490f14e-7f21-43b8-b7fc-d15a44befb11"],
Cell[1258, 46, 30, 0, 25, "WCIntroDividerLine",ExpressionUUID->"8a2590e0-6403-4b13-a2bd-1877f31c7548"],
Cell[1291, 48, 422, 13, 99, "Description",ExpressionUUID->"86fd8625-afbd-45a7-a035-c7cb2b5ac9f8"],
Cell[CellGroupData[{
Cell[1738, 65, 31, 0, 72, "Section",ExpressionUUID->"b33dc1cf-f5b6-49da-a883-7bf96b02ccb5"],
Cell[1772, 67, 292, 7, 53, "Text",ExpressionUUID->"fe94a419-df4f-4014-a0a6-58d237e5dd37"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2101, 79, 47, 0, 72, "Section",ExpressionUUID->"0538f9ce-7830-4470-bde1-c8f87f071b8a"],
Cell[2151, 81, 442, 12, 80, "Text",ExpressionUUID->"9c3465d6-06c7-4ad4-a17e-615ac09f0cfd"],
Cell[CellGroupData[{
Cell[2618, 97, 235, 9, 32, "Input",ExpressionUUID->"efa64858-4921-4c70-aa6d-f4e7b6370a54",
 Evaluatable->False],
Cell[2856, 108, 227, 7, 36, "Output",ExpressionUUID->"f68d3c1a-d088-47c1-a88a-52e9f0868231"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3132, 121, 35, 0, 72, "Subsection",ExpressionUUID->"b6cb8b28-f556-4c32-be56-98c6363fa464"],
Cell[CellGroupData[{
Cell[3192, 125, 235, 9, 70, "Input",ExpressionUUID->"f267983c-f749-424c-829f-5a1c068ce5a0",
 Evaluatable->False],
Cell[3430, 136, 227, 7, 70, "Output",ExpressionUUID->"3edd9425-67c2-4f33-a527-9ab76f27bb35"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3694, 148, 236, 9, 70, "Input",ExpressionUUID->"cdb8bdda-17b4-44a4-883a-16565ce3fc09",
 Evaluatable->False],
Cell[3933, 159, 227, 7, 70, "Output",ExpressionUUID->"6667a831-348a-4339-b61e-db5e2c3c5689"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4197, 171, 236, 9, 70, "Input",ExpressionUUID->"66bd9495-13e4-4c61-8dcc-bd9d046b198e",
 Evaluatable->False],
Cell[4436, 182, 227, 7, 70, "Output",ExpressionUUID->"1b7d1e8b-ec38-4f97-8182-75587ee30051"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[4724, 196, 623, 20, 63, "WCIntroDivider",ExpressionUUID->"86e290d6-bb88-48bd-b3fd-5ff067a47e03",
 CellGroupingRules->{"SectionGrouping", 0}],
Cell[5350, 218, 73, 1, 44, "WCIntroDividerLine",ExpressionUUID->"5700d213-4eed-4540-9404-826109533bda"],
Cell[CellGroupData[{
Cell[5448, 223, 157, 3, 34, "Input",ExpressionUUID->"614faa7f-002a-45f1-8c0f-a96a7d0aa30a"],
Cell[5608, 228, 130, 1, 38, "Output",ExpressionUUID->"3cab857d-3d69-40c5-b454-62abe007588f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5775, 234, 128, 2, 34, "Input",ExpressionUUID->"4c26cb70-ff5a-4897-ae85-a71f8520a95e"],
Cell[5906, 238, 107, 1, 38, "Output",ExpressionUUID->"4931d414-d46d-46eb-bf58-aa0c11b21803"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6050, 244, 229, 5, 34, "Input",ExpressionUUID->"24139b2d-5628-4685-910c-6f31f0ad174d"],
Cell[6282, 251, 182, 3, 38, "Output",ExpressionUUID->"0a770dd9-5ec0-4179-8658-f625d582e94e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6501, 259, 300, 7, 34, "Input",ExpressionUUID->"fa9026e5-ac07-4ce0-a310-dbad80671704"],
Cell[6804, 268, 327, 7, 38, "Output",ExpressionUUID->"e89f92d7-7843-4c62-99fa-1d177aba06e0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7168, 280, 299, 7, 34, "Input",ExpressionUUID->"1bae656d-89ad-4a96-bc73-4dcaf554ec18"],
Cell[7470, 289, 368, 11, 38, "Output",ExpressionUUID->"7c756043-0be4-4cd6-ade9-e109ffe1e106"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7875, 305, 355, 9, 34, "Input",ExpressionUUID->"d604f037-590e-4f4a-adee-5ccc8327e202"],
Cell[8233, 316, 239, 5, 38, "Output",ExpressionUUID->"40198607-4cd8-4833-9e39-e6c516fe3730"]
}, Open  ]],
Cell[8487, 324, 464, 12, 61, "Input",ExpressionUUID->"e7cd404d-bced-432f-81b5-86ad3eea70c5"],
Cell[CellGroupData[{
Cell[8976, 340, 147, 2, 34, "Input",ExpressionUUID->"dda2f9ff-ec4f-42c9-88b4-53543860f1d6"],
Cell[9126, 344, 259, 5, 38, "Output",ExpressionUUID->"44bc336a-46a1-498e-988e-5647d708d32b"]
}, Open  ]],
Cell[9400, 352, 39502, 653, 457, "Input",ExpressionUUID->"c40d2f21-2aa1-48cc-bd87-a65a1f301c3b"],
Cell[48905, 1007, 103, 1, 34, "Input",ExpressionUUID->"4acfb21f-f432-4144-b6d2-d23b5ffbdfc7",
 CellTags->"NoLabel"],
Cell[49011, 1010, 102, 0, 29, "Text",ExpressionUUID->"ae862638-60ff-428b-b55e-77ae3e256797"],
Cell[49116, 1012, 605, 19, 66, "WCIntroDivider",ExpressionUUID->"f0ab75d3-6eb3-465f-bea4-748d2933cc99"],
Cell[49724, 1033, 39, 0, 44, "WCIntroDividerLine",ExpressionUUID->"3289c35d-dcc4-4a98-879b-82e6c1508eb7"],
Cell[49766, 1035, 462, 12, 61, "Input",ExpressionUUID->"4f3af2b2-6291-4158-b6e0-c2a9f2ad5983",
 CellTags->"NoLabel"]
}, Open  ]],
Cell[50243, 1050, 9804, 209, 101, "SubmitRow",ExpressionUUID->"e95e84fc-f934-450c-bae2-2107cc70e6af"]
}
]
*)

